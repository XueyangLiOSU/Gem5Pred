,Tag,Codes,simSeconds,hostSeconds
0,mul/div_mul1-0,"#include <stdio.h>
int main()
{
    int n=1000;
    int array[n];
    int result[n];
    array[0]=1;
    result[0]=1;
    for (int i = 1; i < n; i++) {
        array[i] = n * n;
        result[i] = n * n;
    }
}",0.000372,0.26
1,mul/div_mul1-1,"#include <stdio.h>
int main()
{
    int n=1000;
    int array[n];
    int result[n];
    array[0]=1;
    result[0]=1;
    for (int i = 1; i < n; i++) {
        array[i] = result[i-1] * result[i-1];
        result[i] = array[i] * array[i-1];
    }
}",0.000401,0.3
2,mul/div_mul10-0,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRAY_SIZE 10000

int main() {
    int array[ARRAY_SIZE];
    int sum = 0;
    srand(time(NULL));
    printf(""Random array: "");
    for (int i = 0; i < ARRAY_SIZE; i++) {
        array[i] = rand() % 100;
        printf(""%d "", array[i]);
        sum = array[i];
    }
    printf(""\nSum of array elements: %d\n"", sum);
    return 0;
}
",0.013272,10.35
3,mul/div_mul10-1,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRAY_SIZE 10000

int main() {
    int array[ARRAY_SIZE];
    int sum = 0;
    srand(time(NULL));
    printf(""Random array: "");
    for (int i = 0; i < ARRAY_SIZE; i++) {
        array[i] = rand() % 100;
        printf(""%d "", array[i]);
        sum *= array[i];
    }
    printf(""\nSum of array elements: %d\n"", sum);
    return 0;
}
",0.013303,10.21
4,mul/div_mul11-0,"#include <stdio.h>

int main() {
    int n = 5000;
    int a[n], b[n], c[n];
    for (int i = 0; i < n; i++) {
        a[i] = i + 1;
        b[i] = n - i;
    }
    for (int i = 0; i < n; i++) {
        c[i] = a[i] * b[i];
        if (i > 0) {
            c[i] = n;
        }
    }
    printf(""The sum of the product of the arrays is %d\n"", c[n-1]);
    return 0;
}
",0.000992,0.63
5,mul/div_mul11-1,"#include <stdio.h>

int main() {
    int n = 5000;
    int a[n], b[n], c[n];
    for (int i = 0; i < n; i++) {
        a[i] = i + 1;
        b[i] = a[i] - i;
    }
    for (int i = 0; i < n; i++) {
        c[i] = a[i] * b[i];
        if (i > 0) {
            c[i] *= c[i-1];
        }
    }
    printf(""The sum of the product of the arrays is %d\n"", c[n-1]);
    return 0;
}
",0.001118,0.71
6,mul/div_mul12-0,"#include <stdio.h>

int main() {
    int n = 500;
    int a[n], b[n], c[n];
    for (int i = 0; i < n; i++) {
        a[i] = i + 1;
        b[i] = i + 2;
        c[i] = 0;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            c[i] = a[j] / b[j];
        }
        c[i] += c[i - 1];
    }
    printf(""The final value of c[0] is %d\n"", c[0]);
    return 0;
}
",0.009823,8.42
7,mul/div_mul12-1,"#include <stdio.h>

int main() {
    int n = 500;
    int a[n], b[n], c[n];
    for (int i = 0; i < n; i++) {
        a[i] = i + 1;
        b[i] = i + 2;
        c[i] = 0;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            c[i] *= a[j] / b[j];
        }
        c[i] += c[i - 1];
    }
    printf(""The final value of c[0] is %d\n"", c[0]);
    return 0;
}
",0.011822,9.64
8,mul/div_mul13-0,"#include <stdio.h>

int main() {
    int n=1000;
    int arr[n];
    int i, j, temp;
    
    for (i=0; i<n; i++) {
        arr[i]=n-1;
    }
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-1 - i; j++) {
            if (arr[j] / 2 > arr[j + 1] / 2) {  // data dependence with division
                temp = arr[j];
                arr[j] = arr[j];
                arr[j + 1] = arr[j];
            }
        }
    }

    printf(""Sorted array: "");
    for (i = 0; i < n; i++) {
        printf(""%d "", arr[i]);
    }
    printf(""\n"");

    return 0;
}
",0.022702,16.26
9,mul/div_mul13-1,"#include <stdio.h>

int main() {
    int n=1000;
    int arr[n];
    int i, j, temp;
    
    for (i=0; i<n; i++) {
        arr[i]=n-1;
    }
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-1 - i; j++) {
            if (arr[j] / 2 > arr[j + 1] / 2) {  // data dependence with division
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    printf(""Sorted array: "");
    for (i = 0; i < n; i++) {
        printf(""%d "", arr[i]);
    }
    printf(""\n"");

    return 0;
}
",0.022201,16.07
10,mul/div_mul14-0,"#include <stdio.h>

#define SIZE 100

int main() {
  int a[SIZE][SIZE];
  int b[SIZE][SIZE];
  int c[SIZE][SIZE];
  
  for (int i = 0; i < SIZE; i++) {
    for (int j = 0; j < SIZE; j++) {
      a[i][j] = i + j;
      b[i][j] = i + j;
    }
  }
  
  // Calculate the product of matrices a and b and store the result in c
  for (int i = 0; i < SIZE; i++) {
    for (int j = 0; j < SIZE; j++) {
      c[i][j] = 0;
      for (int k = 0; k < SIZE; k++) {
        c[i][j] += a[i][k] * b[k][j];
      }
      if (j > 0) {
        c[i][j] += 8;
      }
    }
  }
  
  // Print out the result matrix c
  for (int i = 0; i < SIZE; i++) {
    for (int j = 0; j < SIZE; j++) {
      printf(""%d "", c[i][j]);
    }
    printf(""\n"");
  }
  
  return 0;
}
",0.10283,70.96
11,mul/div_mul14-1,"#include <stdio.h>

#define SIZE 100

int main() {
  int a[SIZE][SIZE];
  int b[SIZE][SIZE];
  int c[SIZE][SIZE];
  
  for (int i = 0; i < SIZE; i++) {
    for (int j = 0; j < SIZE; j++) {
      a[i][j] = b[i][j-1] + j;
      b[i][j] = a[i][j] + j;
    }
  }
  
  // Calculate the product of matrices a and b and store the result in c
  for (int i = 0; i < SIZE; i++) {
    for (int j = 0; j < SIZE; j++) {
      c[i][j] = 0;
      for (int k = 0; k < SIZE; k++) {
        c[i][j] += a[i][k] * b[k][j];
      }
      if (j > 0) {
        c[i][j] += c[i][j-1];
      }
    }
  }
  
  // Print out the result matrix c
  for (int i = 0; i < SIZE; i++) {
    for (int j = 0; j < SIZE; j++) {
      printf(""%d "", c[i][j]);
    }
    printf(""\n"");
  }
  
  return 0;
}
",0.103801,72.58
12,mul/div_mul15-0,"#include <stdio.h>

int main() {
   int n=10000;
   int a[n];
   int b[n];
   int c[n];
   int i;
   
   for (i=0; i<n; i++){
       c[i]=i%40;
       a[i]=i;
       b[i]=i+1;
   }
   
   for (i = 0; i < n; i++) {
       if (a[i] > 20) {
           c[i] = a[i] / b[i];
       } else {
           c[i] = b[i] * a[i];
       }
   }

   printf(""Result array:\n"");
   for (i = 0; i < n; i++) {
       printf(""%d "", c[i]);
   }
   printf(""\n"");
   
   return 0;
}
",0.012002,9.75
13,mul/div_mul15-1,"#include <stdio.h>

int main() {
   int n=10000;
   int a[n];
   int b[n];
   int c[n];
   int i;
   
   for (i=0; i<n; i++){
       c[i]=i%40;
       a[i]=i;
       b[i]=a[i]+1;
   }
   
   for (i = 0; i < n; i++) {
       if (a[i] > 20) {
           c[i] = c[i] / b[i];
       } else {
           c[i] = c[i] * a[i];
       }
   }

   printf(""Result array:\n"");
   for (i = 0; i < n; i++) {
       printf(""%d "", c[i]);
   }
   printf(""\n"");
   
   return 0;
}
",0.012101,9.67
14,mul/div_mul16-0,"#include <stdio.h>

#define SIZE 30

int main() {
    int arr[SIZE][SIZE][SIZE];
    int i, j, k;

    // Initialize array
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                arr[i][j][k] = i + j + k;
            }
        }
    }

    // Perform operation with data dependency
    for (i = 1; i < SIZE; i++) {
        for (j = 1; j < SIZE; j++) {
            for (k = 1; k < SIZE; k++) {
                arr[i][j][k] = i + j + k;
            }
        }
    }

    // Print results
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                printf(""%d "", arr[i][j][k]);
            }
            printf(""\n"");
        }
        printf(""\n"");
    }

    return 0;
}
",0.032316,31.53
15,mul/div_mul16-1,"#include <stdio.h>

#define SIZE 30

int main() {
    int arr[SIZE][SIZE][SIZE];
    int i, j, k;

    // Initialize array
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                arr[i][j][k] = i + j + k;
            }
        }
    }

    // Perform operation with data dependency
    for (i = 1; i < SIZE; i++) {
        for (j = 1; j < SIZE; j++) {
            for (k = 1; k < SIZE; k++) {
                arr[i][j][k] = arr[i-1][j-1][k-1] + arr[i][j][k-1] + arr[i][j-1][k];
            }
        }
    }

    // Print results
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                printf(""%d "", arr[i][j][k]);
            }
            printf(""\n"");
        }
        printf(""\n"");
    }

    return 0;
}
",0.038385,35.85
16,mul/div_mul17-0,"#include <stdio.h>

#define N 20

int main() {
    int A[N][N][N], B[N][N][N], C[N][N][N], D[N][N][N];
    int i, j, k, l;

    // Initialization
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            for (k = 0; k < N; k++) {
                A[i][j][k] = i + j + k;
                B[i][j][k] = i * j * k;
                C[i][j][k] = 0;
                D[i][j][k] = 0;
            }
        }
    }

    // Compute C and D arrays
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            for (k = 0; k < N; k++) {
                for (l = 0; l < N; l++) {
                    C[i][j][k] *= A[i][j][l] + B[l][j][k];
                    D[i][j][k] *= B[i][j][l] + A[i][l][k];
                }
            }
        }
    }

    // Print out result for verification
    printf(""D[0][0][0]: %d\n"", D[0][0][0]);

    return 0;
}
",0.041885,29.17
17,mul/div_mul17-1,"#include <stdio.h>

#define N 20

int main() {
    int A[N][N][N], B[N][N][N], C[N][N][N], D[N][N][N];
    int i, j, k, l;

    // Initialization
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            for (k = 0; k < N; k++) {
                A[i][j][k] = i + j + k;
                B[i][j][k] = i * j * k;
                C[i][j][k] = 0;
                D[i][j][k] = 0;
            }
        }
    }

    // Compute C and D arrays
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            for (k = 0; k < N; k++) {
                for (l = 0; l < N; l++) {
                    C[i][j][k] *= D[i][j][l-1] + B[l][j][k];
                    D[i][j][k] *= C[i][j][l] + A[i][l][k];
                }
            }
        }
    }

    // Print out result for verification
    printf(""D[0][0][0]: %d\n"", D[0][0][0]);

    return 0;
}
",0.041733,27.11
18,mul/div_mul18-0,"#include <stdio.h>

int main() {
  int n = 50;
  int arr[n][n][n];

  for(int i=0; i<n; i++) {
    for(int j=0; j<n; j++) {
      for(int k=0; k<n; k++) {
        arr[i][j][k] = 1;
      }
    }
  }

  int sum = 1;
  for(int i=0; i<n; i++) {
    for(int j=0; j<n; j++) {
      for(int k=0; k<n; k++) {
          sum = arr[i][j][k];
      }
    }
  }

  printf(""Sum of even numbers: %d\n"", sum);

  return 0;
}
",0.010851,8.06
19,mul/div_mul18-1,"#include <stdio.h>

int main() {
  int n = 50;
  int arr[n][n][n];

  for(int i=0; i<n; i++) {
    for(int j=0; j<n; j++) {
      for(int k=0; k<n; k++) {
        arr[i][j][k] = 1;
      }
    }
  }

  int sum = 1;
  for(int i=0; i<n; i++) {
    for(int j=0; j<n; j++) {
      for(int k=0; k<n; k++) {
          sum *= arr[i][j][k];
      }
    }
  }

  printf(""Sum of even numbers: %d\n"", sum);

  return 0;
}
",0.011497,8.65
20,mul/div_mul19-0,"#include <stdio.h>

int main() {
    int n = 10000;
    double a[n];
    double mul = 1;
    a[0]=1.0;

    for (int i = 1; i < n; i++) {
        a[i] = 1;
    }

    for (int i = 0; i < n; i++) {
        mul *= 1;
    }

    printf(""Sum: %lf\n"", mul);

    return 0;
}
",0.000902,0.63
21,mul/div_mul19-1,"#include <stdio.h>

int main() {
    int n = 10000;
    double a[n];
    double mul = 1;
    a[0]=1.0;

    for (int i = 1; i < n; i++) {
        a[i] = a[i-1];
    }

    for (int i = 0; i < n; i++) {
        mul *= a[i];
    }

    printf(""Sum: %lf\n"", mul);

    return 0;
}
",0.001172,0.82
22,mul/div_mul2-0,"#include <stdio.h>
int main()
{
    int n=1000;
    int array[n][n];
    int result[n][n];
    for (int i = 1; i < n; i++) {
        for (int j=1; j<n; j++){
                array[i][j] = 0 * 0;
                result[i][j] = 0 * 0;
        }
    }
}",0.000372,0.26
23,mul/div_mul2-1,"#include <stdio.h>
int main()
{
    int n=1000;
    int array[n][n];
    int result[n][n];
    for (int i = 1; i < n; i++) {
        for (int j=1; j<n; j++){
                array[i][j] = result[i][j-1] * result[i][j-1];
                result[i][j] = array[i][j] * array[i][j-1];
        }
    }
}",0.125235,95.73
24,mul/div_mul20-0,"#include <stdio.h>

#define N 3000

int main() {
    int A[N], B[N], C[N], D[N];

    // Initialize arrays A and B
    for (int i = 0; i < N; i++) {
        A[i] = i + 1;
        B[i] = 1;
    }

    // Compute array C with data dependency
    for (int i = 1; i < N; i++) {
        C[i] = A[i] + B[i];
    }

    // Compute array D with data dependency
    for (int i = 1; i < N; i++) {
        D[i] = C[N-1-i] * B[i];
    }

    // Print arrays A, B, C, and D
    printf(""Array A:\n"");
    for (int i = 0; i < N; i++) {
        printf(""%d "", A[i]);
    }
    printf(""\n"");

    printf(""Array B:\n"");
    for (int i = 0; i < N; i++) {
        printf(""%d "", B[i]);
    }
    printf(""\n"");

    printf(""Array C:\n"");
    for (int i = 0; i < N; i++) {
        printf(""%d "", C[i]);
    }
    printf(""\n"");

    printf(""Array D:\n"");
    for (int i = 0; i < N; i++) {
        printf(""%d "", D[i]);
    }
    printf(""\n"");

    return 0;
}
",0.01451,12.7
25,mul/div_mul20-1,"#include <stdio.h>

#define N 3000

int main() {
    int A[N], B[N], C[N], D[N];

    // Initialize arrays A and B
    for (int i = 0; i < N; i++) {
        A[i] = i + 1;
        B[i] = A[i] - i;
    }

    // Compute array C with data dependency
    for (int i = 1; i < N; i++) {
        C[i] = C[i-1] + A[i] + B[i];
    }

    // Compute array D with data dependency
    for (int i = 1; i < N; i++) {
        D[i] = D[i-1] + C[N-1-i] * B[i];
    }

    // Print arrays A, B, C, and D
    printf(""Array A:\n"");
    for (int i = 0; i < N; i++) {
        printf(""%d "", A[i]);
    }
    printf(""\n"");

    printf(""Array B:\n"");
    for (int i = 0; i < N; i++) {
        printf(""%d "", B[i]);
    }
    printf(""\n"");

    printf(""Array C:\n"");
    for (int i = 0; i < N; i++) {
        printf(""%d "", C[i]);
    }
    printf(""\n"");

    printf(""Array D:\n"");
    for (int i = 0; i < N; i++) {
        printf(""%d "", D[i]);
    }
    printf(""\n"");

    return 0;
}
",0.015359,13.1
26,mul/div_mul21-0,"#include <stdio.h>

#define N 100
#define M 50

int main() {
    int arr[N][M];
    int i, j, k, l;
    
    // Initialize the array
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            arr[i][j] = 1;
        }
    }
    
    // Perform some calculations using data dependence
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            for (k = 0; k < i; k++) {
                for (l = 0; l < j; l++) {
                    arr[i][j] = arr[k][l];
                }
            }
        }
    }
    
    // Print the resulting array
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            printf(""%d "", arr[i][j]);
        }
        printf(""\n"");
    }
    
    return 0;
}
",0.308147,232.02
27,mul/div_mul21-1,"#include <stdio.h>

#define N 100
#define M 50

int main() {
    int arr[N][M];
    int i, j, k, l;
    
    // Initialize the array
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            arr[i][j] = arr[i][j-1]+1;
        }
    }
    
    // Perform some calculations using data dependence
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            for (k = 0; k < i; k++) {
                for (l = 0; l < j; l++) {
                    arr[i][j] += arr[k][l];
                }
            }
        }
    }
    
    // Print the resulting array
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            printf(""%d "", arr[i][j]);
        }
        printf(""\n"");
    }
    
    return 0;
}
",0.419168,306.16
28,mul/div_mul22-0,"#include <stdio.h>

#define SIZE 10

int main() {
    int a[SIZE][SIZE][SIZE][SIZE][SIZE];
    int i, j, k, l, m;

    // initialize array
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                for (l = 0; l < SIZE; l++) {
                    for (m = 0; m < SIZE; m++) {
                        a[i][j][k][l][m] = i - j + k - l + m;
                    }
                }
            }
        }
    }

    // perform computation
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                for (l = 0; l < SIZE; l++) {
                    for (m = 0; m < SIZE-1; m++) {
                        a[i][j][k][l][m+1] = a[i][j][k][l][m+1] + a[i][j][k][l][m+1];
                    }
                }
            }
        }
    }

    // print results
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                for (l = 0; l < SIZE; l++) {
                    for (m = 0; m < SIZE; m++) {
                        printf(""%d "", a[i][j][k][l][m]);
                    }
                }
            }
        }
    }
    return 0;
}
",0.128725,118.6
29,mul/div_mul22-1,"#include <stdio.h>

#define SIZE 10

int main() {
    int a[SIZE][SIZE][SIZE][SIZE][SIZE];
    int i, j, k, l, m;

    // initialize array
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                for (l = 0; l < SIZE; l++) {
                    for (m = 0; m < SIZE; m++) {
                        a[i][j][k][l][m] = i - j + k - l + m;
                    }
                }
            }
        }
    }

    // perform computation
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                for (l = 0; l < SIZE; l++) {
                    for (m = 0; m < SIZE-1; m++) {
                        a[i][j][k][l][m+1] = a[i][j][k][l][m] + a[i][j][k][l][m+1];
                    }
                }
            }
        }
    }

    // print results
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                for (l = 0; l < SIZE; l++) {
                    for (m = 0; m < SIZE; m++) {
                        printf(""%d "", a[i][j][k][l][m]);
                    }
                }
            }
        }
    }
    return 0;
}
",0.13494,119.41
30,mul/div_mul23-0,"#include <stdio.h>
#define SIZE 15

int main() {
    int arr[SIZE][SIZE][SIZE];
    int i, j, k, m, n;

    // Initialize array
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                arr[i][j][k] = i * j + k + 1;
            }
        }
    }

    // Compute multiplication of elements
    int sum = 0;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                for (m = 0; m < SIZE; m++) {
                    for (n = 0; n < SIZE; n++) {
                        sum = arr[i][j][k] / arr[m][n][k];
                    }
                }
            }
        }
    }

    printf(""Mul: %d\n"", sum);
    return 0;
}
",0.043242,38.07
31,mul/div_mul23-1,"#include <stdio.h>
#define SIZE 15

int main() {
    int arr[SIZE][SIZE][SIZE];
    int i, j, k, m, n;

    // Initialize array
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                arr[i][j][k] = i * j + k + 1;
            }
        }
    }

    // Compute multiplication of elements
    int sum = 0;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            for (k = 0; k < SIZE; k++) {
                for (m = 0; m < SIZE; m++) {
                    for (n = 0; n < SIZE; n++) {
                        sum *= arr[i][j][k] / arr[m][n][k];
                    }
                }
            }
        }
    }

    printf(""Mul: %d\n"", sum);
    return 0;
}
",0.045414,46.17
32,mul/div_mul24-0,"#include <stdio.h>

#define N 20

int main() {
  int A[N][N][N];
  int i, j, k, l, m, sum;

  // Initialize the array
  for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
      for (k = 0; k < N; k++) {
        A[i][j][k] = i * j + k;
      }
    }
  }

  // Perform some computations with data dependency
  for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
      for (k = 0; k < N; k++) {
        sum = 1;
        for (l = 0; l < i; l++) {
          for (m = 0; m < j; m++) {
            sum = A[l][m][k];
          }
        }
        A[i][j][k] = sum / (i * j + 1);
      }
    }
  }

  // Print the results
  for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
      for (k = 0; k < N; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}
",0.041688,34.36
33,mul/div_mul24-1,"#include <stdio.h>

#define N 30

int main() {
  int A[N][N][N];
  int i, j, k, l, m, sum;

  // Initialize the array
  for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
      for (k = 0; k < N; k++) {
        A[i][j][k] = i * j + k;
      }
    }
  }

  // Perform some computations with data dependency
  for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
      for (k = 0; k < N; k++) {
        sum = 1;
        for (l = 0; l < i; l++) {
          for (m = 0; m < j; m++) {
            sum *= A[l][m][k];
          }
        }
        A[i][j][k] = sum / (i * j + 1);
      }
    }
  }

  // Print the results
  for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++) {
      for (k = 0; k < N; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}
",0.311203,214.07
34,mul/div_mul25-0,"#include <stdio.h>

int main() {
    int a[100], b[100], c[100];
    int n = 100;
    
    // Initialize array a and b
    for (int i = 0; i < n; i++) {
        a[i] = i;
        b[i] = n - i;
    }
    
    // Perform data dependent computation
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                c[i] = a[j] * b[k];
            }
        }
    }
    
    // Print result
    printf(""Result: "");
    for (int i = 0; i < n; i++) {
        printf(""%d "", c[i]);
    }
    printf(""\n"");
    
    return 0;
}
",0.029832,23.95
35,mul/div_mul25-1,"#include <stdio.h>

int main() {
    int a[100], b[100], c[100];
    int n = 100;
    
    // Initialize array a and b
    for (int i = 0; i < n; i++) {
        a[i] = i;
        b[i] = n - i;
    }
    
    // Perform data dependent computation
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                c[i] += a[j] * b[k];
            }
        }
    }
    
    // Print result
    printf(""Result: "");
    for (int i = 0; i < n; i++) {
        printf(""%d "", c[i]);
    }
    printf(""\n"");
    
    return 0;
}
",0.035841,28.73
36,mul/div_mul3-0,"#include <stdio.h>

int main() {
    int a = 2;
    int b = 5;
    int c = 5 * 5;
    for (int i = 1; i < 10000; i++) {
        c = 3 * 3;
    }
}
",0.00043,0.33
37,mul/div_mul3-1,"#include <stdio.h>

int main() {
    int a = 2;
    int b = 5;
    int c = a * b;
    for (int i = 1; i < 10000; i++) {
        c = a * c;
    }
}
",0.00047,0.36
38,mul/div_mul4-0,"#include <stdio.h>

int main() {
    int n=987;
    int x[n];
    int y[n];
    int i;
    for (i = 0; i < n; i++) {
        if (i == 0) {
            y[i] = 1;
        } else {
            y[i] = 2 * 2;
        }
    }
}
",0.00033,0.24
39,mul/div_mul4-1,"#include <stdio.h>

int main() {
    int n=987;
    int x[n];
    int y[n];
    int i;
    for (i = 0; i < n; i++) {
        if (i == 0) {
            y[i] = x[i];
        } else {
            y[i] = x[i] * y[i-1];
        }
    }
}
",0.000375,0.28
40,mul/div_mul5-0,"#include <stdio.h>

int main() {
    int n = 2370;
    int a[n], b[n], c[n];
    a[0] = 1;
    b[0] = 2;
    c[0] = a[0] * b[0];

    for (int i = 1; i < n; i++) {
        a[i] = i+1;
        b[i] = 2*(i+1);
        c[i] = i * i * c[i-1];
    }
}
",0.00033,0.23
41,mul/div_mul5-1,"#include <stdio.h>

int main() {
    int n = 2370;
    int a[n], b[n], c[n];
    a[0] = 1;
    b[0] = 2;
    c[0] = a[0] * b[0];

    for (int i = 1; i < n; i++) {
        a[i] = i+1;
        b[i] = 2*(i+1);
        c[i] = a[i] * b[i] * c[i-1];
    }
}
",0.000331,0.26
42,mul/div_mul6-0,"#include <stdio.h>

int multiply(int n, int a[][n], int b[][n], int c[][n], int i, int j) {
    if (j == n) {
        j = 0;
        i++;
    }
    if (i == n) {
        return 0;
    }
    for (int k = 0; k < n; k++) {
        if (a[i][k] > b[k][j]) {
            c[i][j] = a[i][k] * b[k][j];
        } else {
            c[i][j] = a[i][k] * b[k][j];
        }
    }
    multiply(n, a, b, c, i, j + 1);
}

int main() {
    int n = 50;
    int a[n][n];
    int b[n][n];
    int c[n][n];

    multiply(n, a, b, c, 0, 0);

    printf(""Result:\n"");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf(""%d "", c[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.016508,11.41
43,mul/div_mul6-1,"#include <stdio.h>

int multiply(int n, int a[][n], int b[][n], int c[][n], int i, int j) {
    if (j == n) {
        j = 0;
        i++;
    }
    if (i == n) {
        return 0;
    }
    for (int k = 0; k < n; k++) {
        if (a[i][k] > b[k][j]) {
            c[i][j] *= a[i][k] * b[k][j];
        } else {
            c[i][j] *= a[i][k] * b[k][j];
        }
    }
    multiply(n, a, b, c, i, j + 1);
}

int main() {
    int n = 50;
    int a[n][n];
    int b[n][n];
    int c[n][n];

    multiply(n, a, b, c, 0, 0);

    printf(""Result:\n"");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf(""%d "", c[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.018728,13.46
44,mul/div_mul7-0,"#include <stdio.h>

int main() {
    int n = 128;
    int a[n][n];
    int b[n][n];
    int c[n][n];

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int sum = 0;
            for (int k = 0; k < n; k++) {
                sum = a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }

    return 0;
}
",0.104452,72.55
45,mul/div_mul7-1,"#include <stdio.h>

int main() {
    int n = 128;
    int a[n][n];
    int b[n][n];
    int c[n][n];

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int sum = 0;
            for (int k = 0; k < n; k++) {
                sum *= a[i][k] * b[k][j];
            }
            c[i][j] = sum;
        }
    }

    return 0;
}
",0.110844,75.46
46,mul/div_mul8-0,"#include <stdio.h>

int factorial(int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * (n - 1);
    }
}

int main() {
    int n = 500;
    int result = factorial(n);
    printf(""Factorial of %d is %d\n"", n, result);
    return 0;
}
",0.000521,0.32
47,mul/div_mul8-1,"#include <stdio.h>

int factorial(int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

int main() {
    int n = 500;
    int result = factorial(n);
    printf(""Factorial of %d is %d\n"", n, result);
    return 0;
}
",0.000546,0.36
48,mul/div_mul9-0,"#include <stdio.h>

int sum_even(int a, int b) {
    int sum = 1;
    for (int i = a; i <= b; i++) {
        if (i % 2 == 0) {
            sum *= 1;
        }
    }
    return sum;
}

int main() {
    int a = 1, b = 6730;
    int result = sum_even(a, b);
    printf(""Sum of even numbers between %d and %d is %d\n"", a, b, result);
    return 0;
}
",0.000625,0.39
49,mul/div_mul9-1,"#include <stdio.h>

int sum_even(int a, int b) {
    int sum = 1;
    for (int i = a; i <= b; i++) {
        if (i % 2 == 0) {
            sum = 1;
        }
    }
    return sum;
}

int main() {
    int a = 1, b = 6730;
    int result = sum_even(a, b);
    printf(""Sum of even numbers between %d and %d is %d\n"", a, b, result);
    return 0;
}
",0.000638,0.41
50,plus_01,"#include <stdio.h>
int main() {    

	int sum1;
    sum1 = 20 + 4;
	
    return 0;
}
",0.00033,0.21
51,plus_02,"#include <stdio.h>
int main() {    

	int sum1,sum2, sum3,sum4,sum5, sum6, sum7,sum8, sum9;
    sum1 = 20 + 4;
	sum2= 200+50;
	sum3 = 100+1;
	sum4 = 2 + 1;
	sum5= 14+0;
	sum6 = 100+10000;
	sum7 = 200 + 450;
	sum8= 2+504;
	sum9 =1+1;
	
    return 0;
}
",0.00033,0.21
52,plus_03,"#include <stdio.h>
int main() {    

	int sum1,sum2, sum3,sum4,sum5, sum6, sum7,sum8, sum9;
    sum1 = 20 + 4+646+66+987+102+478+126;
	sum2= 200+50+30+369+698745+5214+5698+545+66+3210+1025+10;
	sum3 = 100+100+100+100+1000+1058+1036+68+1;
	sum4 = 2000 + 1+9+6+3+2+3333+3214+800;
	sum5= 14+0+6+6+9+158+987+624;
	sum6 = 100+10000+2+4+8+9+145+987+632+258+10000;
	sum7 = 200 + 450+3147895+66698+5+5555214789+1;
	sum8= 2+504;
	sum9 =1+1+5987+996+3214+1;
	
    return 0;
}
",0.00033,0.21
53,plus_04,"#include <stdio.h>
int main() {    

    //int number1, number2, sum;
	int sum1, sum2, sum3;
    
    //number1 = 10;
	//number1 = 20;

    // calculate the sum
    //sum = number1 + number2;
	
    sum1 = 20 + 4;
	sum2 = sum1 + 40;
	sum3 = sum2 + 1;
    //printf(""%d + %d = %d"", number1, number2, sum);
	//printf(""%d,%d, %d"", sum1, sum2, sum3);
    return 0;
}
",0.00033,0.21
54,plus_05,"#include <stdio.h>
int main() {    

	int sum1;
    sum1 = 20 - 4;
	
    return 0;
}
",0.00033,0.21
55,plus_06,"#include <stdio.h>

int main() {
    int num1 = 10;
    int num2 = 20;
    int sum1 = num1 + num2;
    
    int num3 = 30;
    int num4 = 40;
    int sum2 = num3 + num4;
    
    int num5 = 50;
    int num6 = 60;
    int sum3 = num5 + num6;
    
    printf(""%d + %d = %d\n"", num1, num2, sum1);
    printf(""%d + %d = %d\n"", num3, num4, sum2);
    printf(""%d + %d = %d\n"", num5, num6, sum3);
    
    return 0;
}
",0.000527,0.32
56,plus_07,"#include <stdio.h>

int main() {
    int num1 = 10;
    int num2 = 20;
    int sum1 = num1 + num2;
    
    int num3 = 30;
    int num4 = 40;
    int sum2 = num3 + num4;
    
    int num5 = 50;
    int num6 = 60;
    int sum3 = num5 + num6;
    
    printf(""%d + %d = %d\n"", num1, num2, sum1);
    printf(""%d + %d = %d\n"", num3, num4, sum2);
    
    
    return 0;
}
",0.000524,0.32
57,plus_08,"#include <stdio.h>
int main() {    

	int sum1;
    sum1 = 20 + 4;
	printf(""%d"", sum1);
    return 0;
}
",0.000519,0.32
58,plus_09,"#include <stdio.h>
int main() {    

	int sum1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	printf(""%d"", sum1);
    return 0;
}
",0.000519,0.32
59,plus_10,"#include <stdio.h>
int main() {    

	int sum1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	
    return 0;
}
",0.00033,0.22
60,plus_11,"#include <stdio.h>
int main() {    

    //int number1, number2, sum;
	int sum;
    
    //number1 = 10;
	//number1 = 20;

    // calculate the sum
    //sum = number1 + number2;
	
    sum = 20 + 4;
    //printf(""%d + %d = %d"", number1, number2, sum);
	printf(""%d"", sum);
    return 0;
}
",0.000519,0.31
61,plus_12,"#include <stdio.h>
int main() {    

	int sum1,sum2, sum3,sum4,sum5, sum6, sum7,sum8, sum9;
    sum1 = 20 + 4+646+66+987+102+478+126;
	sum2= sum1+50+30+369+698745+5214+5698+545+66+3210+1025+10;
	sum3 = 100+100+100+100+1000+1058+1036+68+1;
	sum4 = 2000 + 1+9+6+3+2+3333+3214+800;
	sum5= sum4+0+6+6+9+158+987+624;
	sum6 = sum4+sum5+2+4+8+9+145+sum1+632+258+sum2;
	sum7 = sum6 + 450+3147895+66698+5+5555214789+1;
	sum8= sum7+sum6;
	sum9 =1+1+sum8+sum7+sum6+1;
	
    return 0;
}
",0.00033,0.22
62,plus_13,"#include <stdio.h>
int main() {    

	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
    return 0;
}
",0.00033,0.21
63,plus_14,"#include <stdio.h>

int main() {
    int num1 = 20;
    int num2 = 50;
    int sum1 = num1 + num2;
    int sum2 = sum1 + 10;
    return 0;
}
",0.00033,0.21
64,plus_15,"#include <stdio.h>

int main() {
    int num1 = 20;
    int num2 = 10;
    int num3 = 5;
    int num4 = 2;
    
    int sum = num1 + num2 + num3;
    int sub1 = sum - num4;
    int sub2 = num1 - num2;
    int result = sub1 + sub2 - num3;
    
    return 0;
}

",0.00033,0.21
65,plus_16,"#include <stdio.h>

int main() {
    int num1 = 1, num2 = 2, num3 = 3, num4 = 4, num5 = 5, num6 = 6, num7 = 7, num8 = 8, num9 = 9, num10 = 10;
    int num11 = 11, num12 = 12, num13 = 13, num14 = 14, num15 = 15, num16 = 16, num17 = 17, num18 = 18, num19 = 19, num20 = 20;
    int num21 = 21, num22 = 22, num23 = 23, num24 = 24, num25 = 25, num26 = 26, num27 = 27, num28 = 28, num29 = 29, num30 = 30;
    int num31 = 31, num32 = 32, num33 = 33, num34 = 34, num35 = 35, num36 = 36, num37 = 37, num38 = 38, num39 = 39, num40 = 40;
    int num41 = 41, num42 = 42, num43 = 43, num44 = 44, num45 = 45, num46 = 46, num47 = 47, num48 = 48, num49 = 49, num50 = 50;

    int result = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 +
                 num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 +
                 num21 + num22 + num23 + num24 + num25 + num26 + num27 + num28 + num29 + num30 +
                 num31 + num32 + num33 + num34 + num35 + num36 + num37 + num38 + num39 + num40 +
                 num41 + num42 + num43 + num44 + num45 + num46 + num47 + num48 + num49 + num50;
                 
    
    return 0;
}

",0.000331,0.22
66,plus_17,"#include <stdio.h>

int main() {
    int a = 10, b = 20, c = 30, d = 40, e = 50;
    int f = a + b, g = f + c, h = g + d, i = h + e;
    int j = i + b, k = j + c, l = k + d, m = l + e;
    int n = m + b, o = n + c, p = o + d, q = p + e;
    int r = q + b, s = r + c, t = s + d, u = t + e;
    int v = u + b, w = v + c, x = w + d, y = x + e;
    int z = y + b;
    
    
    return 0;
}
",0.00033,0.21
67,plus_18,"#include <stdio.h>
int main() {    

	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1 + number2;
	sub1 = number1 - number2;
	sum1 = sum1 + sub1;
	
	int sum2,sub2, number3, number4;
	number3 = 20;
	number4=4;
    sum2 = number3 + number4;
	sub2 = number3 - number4;
	sum2 = sum2 + sub2;
	
	int sum3,sub3, number5, number6;
	number5 = 200;
	number6=400;
    sum3 = number5 + number6;
	sub3 = number5 - number6;
	sum3 = sum3 + sub3;
	
	int sum4,sub4, number7, number8;
	number7 = 845;
	number8=325;
    sum4 = number7 + number8;
	sub4 = number7 - number8;
	sum4 = sum4 + sub4;
	
	int sum5,sub5, number9, number10;
	number9 = 2;
	number10=0;
    sum5 = number9+ number10;
	sub5 = number9- number10;
	sum5 = sum5 + sub5;
	
	int sum6,sub6 number11, number12;
	number11= 20;
	number12=20;
    sum6= number1+ number2;
	sub6= number1- number2;
	sum6= sum6+ sub6
	
	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
	int sum1,sub1, number1, number2;
	number1 = 20;
	number2=4;
    sum1 = number1+ number2;
	sub1 = number1- number2;
	sum1 = sum1 + sub1;
	
	
    return 0;
}
",0.000331,0.21
68,plus_19,"#include <stdio.h>

int main() {
    int num1 = 10;
    int num2 = 20;
    int sum1 = num1 + num2;
    
    int num3 = 30;
    int num4 = 40;
    int sum2 = num3 + num4;
    
    int num5 = 50;
    int num6 = 60;
    int sum3 = num5 + num6;
    
    printf(""%d + %d = %d\n"", num1, num2, sum1);
    
    
    
    return 0;
}
",0.000522,0.32
69,plus_20,"#include <stdio.h>

int main() {
    int a = 10;
    int b = 20;
    int c = 30;
    int d = 40;
    int e = 50;
    int f = 60;
    int g = 70;
    int h = 80;
    int i = 90;
    int j = 100;
    int k = 110;
    int l = 120;
    int m = 130;
    int n = 140;
    int o = 150;
    int p = 160;
    int q = 170;
    int r = 180;
    int s = 190;
    int t = 200;
    int u = a + b;
    int v = c + d;
    int w = e + f;
    int x = g + h;
    int y = i + j;
    int z = k + l;
    int aa = m + n;
    int ab = o + p;
    int ac = q + r;
    int ad = s + t;
    int ae = u + v;
    int af = w + x;
    int ag = y + z;
    int ah = aa + ab;
    int ai = ac + ad;
    int aj = ae + af;
    int ak = ag + ah;
	int am = a + n;
    int an = a + p;
    int ao = b + r;
    int ap = a + t;
    int aq = b + v;
    int ar = v + x;
    int as = x + z;
    int at = ab + ac;
    int au = v + ad;
    int av = o + af;
    int aw = a + ah;
    int sum = ai + aj + ak;
    
    return 0;
}
",0.000331,0.22
70,plus_21,"#include <stdio.h>

int main() {
    int num1 = 50;
    int num2 = 30;
    int result = num1 - num2;
   

    int num3 = 25;
    int num4 = 15;
    result = num3 - num4;
   

    int num5 = 40;
    int num6 = 20;
    result = num5 - num6;
   

    int num7 = 35;
    int num8 = 10;
    result = num7 - num8;
   

    int num9 = 55;
    int num10 = 45;
    result = num9 - num10;
    

    int num11 = 70;
    int num12 = 60;
    result = num11 - num12;
    

    int num13 = 90;
    int num14 = 80;
    result = num13 - num14;
    

    int num15 = 95;
    int num16 = 65;
    result = num15 - num16;
    

    int num17 = 100;
    int num18 = 90;
    result = num17 - num18;
   

    int num19 = 75;
    int num20 = 55;
    result = num19 - num20;
    

    return 0;
}
",0.00033,0.21
71,plus_22,"#include <stdio.h>

int main() {
    int num1 = 50;
    int num2 = 30;
    int result = num1 - num2;
    printf(""%d - %d = %d\n"", num1, num2, result);

    int num3 = 25;
    int num4 = 15;
    result = num3 - num4;
    printf(""%d - %d = %d\n"", num3, num4, result);

    int num5 = 40;
    int num6 = 20;
    result = num5 - num6;
    printf(""%d - %d = %d\n"", num5, num6, result);

    int num7 = 35;
    int num8 = 10;
    result = num7 - num8;
    printf(""%d - %d = %d\n"", num7, num8, result);

    int num9 = 55;
    int num10 = 45;
    result = num9 - num10;
    printf(""%d - %d = %d\n"", num9, num10, result);

    int num11 = 70;
    int num12 = 60;
    result = num11 - num12;
    printf(""%d - %d = %d\n"", num11, num12, result);

    int num13 = 90;
    int num14 = 80;
    result = num13 - num14;
    printf(""%d - %d = %d\n"", num13, num14, result);

    int num15 = 95;
    int num16 = 65;
    result = num15 - num16;
    printf(""%d - %d = %d\n"", num15, num16, result);

    int num17 = 100;
    int num18 = 90;
    result = num17 - num18;
    printf(""%d - %d = %d\n"", num17, num18, result);

    int num19 = 75;
    int num20 = 55;
    result = num19 - num20;
    printf(""%d - %d = %d\n"", num19, num20, result);

    return 0;
}
",0.000548,0.34
72,plus_23,"#include <stdio.h>

int main() {
    int num1 = 50;
    int num2 = 20;
    int num3 = 10;
    int num4 = 15;
    int num5 = 5;
    int num6 = 30;
    int num7 = 25;
    int num8 = 8;
    int num9 = 12;
    int num10 = 7;
    int num11 = 3;
    int num12 = 18;
    int num13 = 4;
    int num14 = 9;
    int num15 = 2;
    
    int result1 = num1 - num2;
    int result2 = num3 - result1;
    int result3 = num4 - result2;
    int result4 = num5 - result3;
    int result5 = num6 - result4;
    int result6 = num7 - result5;
    int result7 = num8 - result6;
    int result8 = num9 - result7;
    int result9 = num10 - result8;
    int result10 = num11 - result9;
    int result11 = num12 - result10;
    int result12 = num13 - result11;
    int result13 = num14 - result12;
    int result14 = num15 - result13;
    
   
    
    return 0;
}
",0.00033,0.21
73,plus_25,"#include <stdio.h>

#define SIZE 5

int main() {
    int v1[SIZE] = {1, 2, 3, 4, 5};
    int v2[SIZE] = {10, 20, 30, 40, 50};
    int result[SIZE];

    // Add the vectors without loop
    int *p1 = v1, *p2 = v2, *p3 = result;
    *p3++ = *p1++ + *p2++;
    *p3++ = *p1++ + *p2++;
    *p3++ = *p1++ + *p2++;
    *p3++ = *p1++ + *p2++;
    *p3++ = *p1++ + *p2++;

    return 0;
}
",0.00033,0.21
74,plus_26,"#include <stdio.h>

#define SIZE 6

int main() {
    int v1[SIZE] = {1, 2, 3, 4, 5, 6};
    int v2[SIZE] = {2, 4, 6, 8, 10, 12};
    int v3[SIZE] = {3, 6, 9, 12, 15, 18};
    int v4[SIZE] = {4, 8, 12, 16, 20, 24};
    int v5[SIZE] = {5, 10, 15, 20, 25, 30};
    int v6[SIZE] = {6, 12, 18, 24, 30, 36};
    
    int r1[SIZE], r2[SIZE], r3[SIZE], r4[SIZE], r5[SIZE];

    r1[0] = v1[0] + v2[0];
    r1[1] = v1[1] + v2[1];
    r1[2] = v1[2] + v2[2];
    r1[3] = v1[3] + v2[3];
    r1[4] = v1[4] + v2[4];
    r1[5] = v1[5] + v2[5];

    r2[0] = r1[0] + v3[0];
    r2[1] = r1[1] + v3[1];
    r2[2] = r1[2] + v3[2];
    r2[3] = r1[3] + v3[3];
    r2[4] = r1[4] + v3[4];
    r2[5] = r1[5] + v3[5];

    r3[0] = r2[0] + v4[0];
    r3[1] = r2[1] + v4[1];
    r3[2] = r2[2] + v4[2];
    r3[3] = r2[3] + v4[3];
    r3[4] = r2[4] + v4[4];
    r3[5] = r2[5] + v4[5];

    r4[0] = r3[0] + v5[0];
    r4[1] = r3[1] + v5[1];
    r4[2] = r3[2] + v5[2];
    r4[3] = r3[3] + v5[3];
    r4[4] = r3[4] + v5[4];
    r4[5] = r3[5] + v5[5];

    r5[0] = r4[0] + v6[0];
    r5[1] = r4[1] + v6[1];
    r5[2] = r4[2] + v6[2];
    r5[3] = r4[3] + v6[3];
    r5[4] = r4[4] + v6[4];
    r5[5] = r4[5] + v6[5];
return 0;
}
",0.000331,0.22
75,plus_27,"#include <stdio.h>

#define ROWS 3
#define COLS 3

int main() {
    int matrix1[ROWS][COLS] = {{1, 2, 3},
                               {4, 5, 6},
                               {7, 8, 9}};
                               
    int matrix2[ROWS][COLS] = {{9, 8, 7},
                               {6, 5, 4},
                               {3, 2, 1}};
                               
    int result[ROWS][COLS];
    
    // Element-wise subtraction
    result[0][0] = matrix1[0][0] - matrix2[0][0];
    result[0][1] = matrix1[0][1] - matrix2[0][1];
    result[0][2] = matrix1[0][2] - matrix2[0][2];
    
    result[1][0] = matrix1[1][0] - matrix2[1][0];
    result[1][1] = matrix1[1][1] - matrix2[1][1];
    result[1][2] = matrix1[1][2] - matrix2[1][2];
    
    result[2][0] = matrix1[2][0] - matrix2[2][0];
    result[2][1] = matrix1[2][1] - matrix2[2][1];
    result[2][2] = matrix1[2][2] - matrix2[2][2];
    
   
    
    return 0;
}
",0.00033,0.22
76,plus_28,"#include <stdio.h>

#define ROWS 5
#define COLS 5

int main() {
    int mat1[ROWS][COLS] = {{1, 2, 3, 4, 5},
                            {6, 7, 8, 9, 10},
                            {11, 12, 13, 14, 15},
                            {16, 17, 18, 19, 20},
                            {21, 22, 23, 24, 25}};
    int mat2[ROWS][COLS] = {{5, 4, 3, 2, 1},
                            {10, 9, 8, 7, 6},
                            {15, 14, 13, 12, 11},
                            {20, 19, 18, 17, 16},
                            {25, 24, 23, 22, 21}};
    int result[ROWS][COLS];

    // Subtract the matrices
    result[0][0] = mat1[0][0] - mat2[0][0];
    result[0][1] = mat1[0][1] - mat2[0][1];
    result[0][2] = mat1[0][2] - mat2[0][2];
    result[0][3] = mat1[0][3] - mat2[0][3];
    result[0][4] = mat1[0][4] - mat2[0][4];

    result[1][0] = mat1[1][0] - mat2[1][0];
    result[1][1] = mat1[1][1] - mat2[1][1];
    result[1][2] = mat1[1][2] - mat2[1][2];
    result[1][3] = mat1[1][3] - mat2[1][3];
    result[1][4] = mat1[1][4] - mat2[1][4];

    result[2][0] = mat1[2][0] - mat2[2][0];
    result[2][1] = mat1[2][1] - mat2[2][1];
    result[2][2] = mat1[2][2] - mat2[2][2];
    result[2][3] = mat1[2][3] - mat2[2][3];
    result[2][4] = mat1[2][4] - mat2[2][4];

    result[3][0] = mat1[3][0] - mat2[3][0];
    result[3][1] = mat1[3][1] - mat2[3][1];
    result[3][2] = mat1[3][2] - mat2[3][2];
    result[3][3] = mat1[3][3] - mat2[3][3];
    result[3][4] = mat1[3][4] - mat2[3][4];
	
	result[4][0] = mat1[4][0] - mat2[4][0];
    result[4][1] = mat1[4][1] - mat2[4][1];
    result[4][2] = mat1[4][2] - mat2[4][2];
    result[4][3] = mat1[4][3] - mat2[4][3];
    result[4][4] = mat1[4][4] - mat2[4][4];

       return 0;
}
",0.000331,0.22
77,plus_29,"#include <stdio.h>

int addEightIntegers(int num1, int num2, int num3, int num4, int num5, int num6, int num7, int num8) {
    int sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8;
    return sum;
}

int main() {
    int result = addEightIntegers(1, 2, 3, 4, 5, 6, 7, 8);
   
    return 0;
}
",0.00033,0.21
78,plus_30,"#include <stdio.h>

int addEightIntegers(int num1, int num2, int num3, int num4, int num5, int num6, int num7, int num8) {
    int sum = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8;
    return sum;
}

int main() {
    int result = addEightIntegers(1, 2, 3, 4, 5, 6, 7, 8);
    printf(""The sum of 8 integers is: %d\n"", result);
    return 0;
}
",0.000522,0.32
79,plus_31,"#include <stdio.h>

int main() {    
    int sum1, sub1, number1, number2;
    int sum2, sub2, number3, number4;
    int sum3, sub3, number5, number6;
    int sum4, sub4, number7, number8;
    int sum5, sub5, number9, number10;
    int sum6, sub6, number11, number12;
    int sum7, sub7, number13, number14;

    number1 = 20;
    number2 = 4;
    sum1 = number1 + number2;
    sub1 = number1 - number2;
    sum1 = sum1 + sub1;

    number3 = 12;
    number4 = 8;
    sum2 = number3 + number4;
    sub2 = number3 - number4;
    sum2 = sum2 + sub2;

    number5 = 6;
    number6 = 3;
    sum3 = number5 + number6;
    sub3 = number5 - number6;
    sum3 = sum3 + sub3;

    number7 = 10;
    number8 = 2;
    sum4 = number7 + number8;
    sub4 = number7 - number8;
    sum4 = sum4 + sub4;

    number9 = 25;
    number10 = 5;
    sum5 = number9 + number10;
    sub5 = number9 - number10;
    sum5 = sum5 + sub5;

    number11 = 16;
    number12 = 12;
    sum6 = number11 + number12;
    sub6 = number11 - number12;
    sum6 = sum6 + sub6;

    number13 = 18;
    number14 = 6;
    sum7 = number13 + number14;
    sub7 = number13 - number14;
    sum7 = sum7 + sub7;

    return 0;
}
",0.00033,0.21
80,plus_32,"#include <stdio.h>

int main() {    
    int num1 = 15;
    int num2 = 8;
    int num3 = 4;
    int num4 = 10;
    int num5 = 5;
    int result1, result2, result3, result4;

    // Calculate result1: (num1 + num2) - (num3 + num4)
    int temp1 = num1 + num2;
    int temp2 = num3 + num4;
    result1 = temp1 - temp2;

    // Calculate result2: (num1 - num2) + (num3 - num4)
    int temp3 = num1 - num2;
    int temp4 = num3 - num4;
    result2 = temp3 + temp4;

    // Calculate result3: (num1 + num2 + num3) - (num4 + num5)
    int temp5 = num1 + num2 + num3;
    int temp6 = num4 + num5;
    result3 = temp5 - temp6;

    // Calculate result4: (num1 - num2) + (num3 - num4) - (num5 + num5)
    int temp7 = num5 + num5;
    result4 = temp3 + temp4 - temp7;

  

    return 0;
}
",0.00033,0.22
81,plus_33,"#include <stdio.h>

#define ROWS 2
#define COLS 2

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
    // Unroll the matrix addition loop manually
    result[0][0] = matrix1[0][0] + matrix2[0][0];
    result[0][1] = matrix1[0][1] + matrix2[0][1];
    result[1][0] = matrix1[1][0] + matrix2[1][0];
    result[1][1] = matrix1[1][1] + matrix2[1][1];
}

void subtract_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
    // Unroll the matrix subtraction loop manually
    result[0][0] = matrix1[0][0] - matrix2[0][0];
    result[0][1] = matrix1[0][1] - matrix2[0][1];
    result[1][0] = matrix1[1][0] - matrix2[1][0];
    result[1][1] = matrix1[1][1] - matrix2[1][1];
}

int main() {
    int matrix1[ROWS][COLS] = {{1, 2}, {3, 4}};
    int matrix2[ROWS][COLS] = {{5, 6}, {7, 8}};
    int result[ROWS][COLS];

    add_matrices(matrix1, matrix2, result);


    subtract_matrices(matrix1, matrix2, result);
 

    int num1 = 5;
    int num2 = 10;
    int num3 = 15;
    int num4 = 20;
    int num5 = 25;
    int num6 = 30;
    int num7 = 35;
    int num8 = 40;

    int sum1 = num1 + num2;
    int sum2 = num3 + num4;
    int sum3 = num5 + num6;
    int sum4 = num7 + num8;
    int sub1 = num2 - num1;
    int sub2 = num4 - num3;
    int sub3 = num6 - num5;
    int sub4 = num8 - num7;

 

    return 0;
}
",0.000331,0.22
82,plus_34,"#include <stdio.h>

#define ROWS 2
#define COLS 2

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
    // Unroll the matrix addition loop manually
    result[0][0] = matrix1[0][0] + matrix2[0][0];
    result[0][1] = matrix1[0][1] + matrix2[0][1];
    result[1][0] = matrix1[1][0] + matrix2[1][0];
    result[1][1] = matrix1[1][1] + matrix2[1][1];
}

void subtract_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
    // Unroll the matrix subtraction loop manually
    result[0][0] = matrix1[0][0] - matrix2[0][0];
    result[0][1] = matrix1[0][1] - matrix2[0][1];
    result[1][0] = matrix1[1][0] - matrix2[1][0];
    result[1][1] = matrix1[1][1] - matrix2[1][1];
}

int main() {
    int matrix1[ROWS][COLS] = {{1, 2}, {3, 4}};
    int matrix2[ROWS][COLS] = {{5, 6}, {7, 8}};
    int matrix3[ROWS][COLS] = {{9, 10}, {11, 12}};
    int result1[ROWS][COLS], result2[ROWS][COLS], final_result[ROWS][COLS];

    add_matrices(matrix1, matrix2, result1); // add the first two matrices
    add_matrices(result1, matrix3, final_result); // add the third matrix to the result

    subtract_matrices(matrix1, matrix2, result1); // subtract the first two matrices
    subtract_matrices(result1, matrix3, result2); // subtract the third matrix from the result

    add_matrices(final_result, result2, final_result); // add the two results together

    

    return 0;
}
",0.000331,0.21
83,plus_35,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
    // Unroll the matrix addition loop manually
    result[0][0] = matrix1[0][0] + matrix2[0][0];
    result[0][1] = matrix1[0][1] + matrix2[0][1];
    result[0][2] = matrix1[0][2] + matrix2[0][2];
    result[1][0] = matrix1[1][0] + matrix2[1][0];
    result[1][1] = matrix1[1][1] + matrix2[1][1];
    result[1][2] = matrix1[1][2] + matrix2[1][2];
    result[2][0] = matrix1[2][0] + matrix2[2][0];
    result[2][1] = matrix1[2][1] + matrix2[2][1];
    result[2][2] = matrix1[2][2] + matrix2[2][2];
}

void subtract_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
    // Unroll the matrix subtraction loop manually
    result[0][0] = matrix1[0][0] - matrix2[0][0];
    result[0][1] = matrix1[0][1] - matrix2[0][1];
    result[0][2] = matrix1[0][2] - matrix2[0][2];
    result[1][0] = matrix1[1][0] - matrix2[1][0];
    result[1][1] = matrix1[1][1] - matrix2[1][1];
    result[1][2] = matrix1[1][2] - matrix2[1][2];
    result[2][0] = matrix1[2][0] - matrix2[2][0];
    result[2][1] = matrix1[2][1] - matrix2[2][1];
    result[2][2] = matrix1[2][2] - matrix2[2][2];
}

int main() {
    int matrix1[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int matrix2[ROWS][COLS] = {{10, 11, 12}, {13, 14, 15}, {16, 17, 18}};
    int matrix3[ROWS][COLS] = {{19, 20, 21}, {22, 23, 24}, {25, 26, 27}};
    int result1[ROWS][COLS];
    int result2[ROWS][COLS];
    int final_result[ROWS][COLS];

    add_matrices(matrix1, matrix2, result1);
    add_matrices(result1, matrix3, final_result);

    subtract_matrices(matrix2, matrix3, result2);
    subtract_matrices(result1, result2, final_result);

    return 0;
}
",0.000331,0.22
84,plus_36,"#include <stdio.h>

int main() {
    int a = 100, b = 50, c = 25;
    int d = 10, e = 5, f = 2;
    int g = 1, h = 3, i = 7;
    
    // Subtraction operations
    a = a - b;
    b = b - c;
    c = c - d;
    d = d - e;
    e = e - f;
    f = f - g;
    g = g - h;
    h = h - i;
    i = i - a;
    a = a - b;
    b = b - c;
    c = c - d;
    d = d - e;
    e = e - f;
    f = f - g;
    g = g - h;
    h = h - i;
    i = i - a;
    a = a - b;
    b = b - c;
    c = c - d;
    d = d - e;
    e = e - f;
    f = f - g;
    g = g - h;
    h = h - i;
    i = i - a;
    a = a - b;
    b = b - c;
    c = c - d;
    d = d - e;
    e = e - f;
    f = f - g;
    g = g - h;
    h = h - i;
    i = i - a;
    a = a - b;
    b = b - c;
    c = c - d;
    d = d - e;
    e = e - f;
    f = f - g;
    g = g - h;
    h = h - i;
    i = i - a;

    // Addition operations
    a = a + b;
    b = b + c;
    c = c + d;
    d = d + e;
    e = e + f;
    f = f + g;
    g = g + h;
    h = h + i;
    i = i + a;
    a = a + b;
    b = b + c;
    c = c + d;
    d = d + e;
    e = e + f;
    f = f + g;
    g = g + h;
    h = h + i;
    i = i + a;
    a = a + b;
    b = b + c;
    c = c + d;
    d = d + e;
    e = e + f;
    f = f + g;
    g = g + h;
    h = h + i;
    i = i + a;
    a = a + b;
    b = b + c;
    c = c + d;
    d = d + e;
    e = e + f;
    f = f + g;
    g = g + h;
    h = h + i;
    i = i + a;
    a = a + b;
    b = b + c;
    c = c + d;
    d = d + e;
    e = e + f;
    f = f + g;
    g = g + h;
    h = h + i;
    i = i + a;
    a = a + b;
    b = b + c;
    c = c + d;
    d = d + e;
    e = e + f;
     return 0;
}
",0.000331,0.22
85,plus_37,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
    // Loop through the matrices and add the corresponding elements
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
}

int main() {
    int matrices[10][ROWS][COLS] = {
        {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}},
        {{10, 11, 12}, {13, 14, 15}, {16, 17, 18}},
        {{19, 20, 21}, {22, 23, 24}, {25, 26, 27}},
        {{28, 29, 30}, {31, 32, 33}, {34, 35, 36}},
        {{37, 38, 39}, {40, 41, 42}, {43, 44, 45}},
        {{46, 47, 48}, {49, 50, 51}, {52, 53, 54}},
        {{55, 56, 57}, {58, 59, 60}, {61, 62, 63}},
        {{64, 65, 66}, {67, 68, 69}, {70, 71, 72}},
        {{73, 74, 75}, {76, 77, 78}, {79, 80, 81}},
        {{82, 83, 84}, {85, 86, 87}, {88, 89, 90}}
    };

    int result[ROWS][COLS];

    // Initialize the result matrix with the first matrix
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = matrices[0][i][j];
        }
    }

    // Loop through the matrices and add them to the result
    for (int k = 1; k < 10; k++) {
        add_matrices(result, matrices[k], result);
    }

 

    return 0;
}
",0.000337,0.22
86,plus_38,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
    // Loop through the matrices and add the corresponding elements
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
}

int main() {
    int matrices[10][ROWS][COLS] = {
        {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}},
        {{10, 11, 12}, {13, 14, 15}, {16, 17, 18}},
        {{19, 20, 21}, {22, 23, 24}, {25, 26, 27}},
        {{28, 29, 30}, {31, 32, 33}, {34, 35, 36}},
        {{37, 38, 39}, {40, 41, 42}, {43, 44, 45}},
        {{46, 47, 48}, {49, 50, 51}, {52, 53, 54}},
        {{55, 56, 57}, {58, 59, 60}, {61, 62, 63}},
        {{64, 65, 66}, {67, 68, 69}, {70, 71, 72}},
        {{73, 74, 75}, {76, 77, 78}, {79, 80, 81}},
        {{82, 83, 84}, {85, 86, 87}, {88, 89, 90}}
    };

    int result[ROWS][COLS];

    // Initialize the result matrix with the first matrix
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            result[i][j] = matrices[0][i][j];
        }
    }

    // Loop through the matrices and add them to the result
    for (int k = 1; k < 10; k++) {
        add_matrices(result, matrices[k], result);
    }

    // Print the result matrix
    printf(""The sum of the matrices is:\n"");
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf(""%d "", result[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.000546,0.34
87,plus_39,"#include <stdio.h>

int main() {
    int num1 = 5;
    int num2 = 10;
    int num3 = 15;
    int num4 = 20;
    int num5 = 25;
    int num6 = 30;
    int num7 = 35;
    int num8 = 40;
    int num9 = 45;
    int num10 = 50;

    // Add two integers at a time
    int sum1 = num1 + num2;
    int sum2 = num3 + num4;
    int sum3 = num5 + num6;
    int sum4 = num7 + num8;
    int sum5 = num9 + num10;

    // Subtract two integers at a time
    int sub1 = num2 - num1;
    int sub2 = num4 - num3;
    int sub3 = num6 - num5;
    int sub4 = num8 - num7;
    int sub5 = num10 - num9;



    return 0;
}
",0.00033,0.21
88,plus_40,"#include <stdio.h>

int main() {
    int num1 = 5;
    int num2 = 10;
    int num3 = 15;
    int num4 = 20;
    int num5 = 25;
    int num6 = 30;
    int num7 = 35;
    int num8 = 40;
    int num9 = 45;
    int num10 = 50;

    // Add two integers at a time
    int sum1 = num1 + num2;
    int sum2 = num3 + num4;
    int sum3 = num5 + num6;
    int sum4 = num7 + num8;
    int sum5 = num9 + num10;

    // Subtract two integers at a time
    int sub1 = num2 - num1;
    int sub2 = num4 - num3;
    int sub3 = num6 - num5;
    int sub4 = num8 - num7;
    int sub5 = num10 - num9;

    printf(""Sum of num1 and num2 is %d\n"", sum1);
    printf(""Sum of num3 and num4 is %d\n"", sum2);
    printf(""Sum of num5 and num6 is %d\n"", sum3);
    printf(""Sum of num7 and num8 is %d\n"", sum4);
    printf(""Sum of num9 and num10 is %d\n"", sum5);

    printf(""Difference between num2 and num1 is %d\n"", sub1);
    printf(""Difference between num4 and num3 is %d\n"", sub2);
    printf(""Difference between num6 and num5 is %d\n"", sub3);
    printf(""Difference between num8 and num7 is %d\n"", sub4);
    printf(""Difference between num10 and num9 is %d\n"", sub5);

    return 0;
}
",0.000539,0.33
89,plus_41,"#include <stdio.h>

void subtract_four_by_four(int arr[]) {
    int result[5]; // to store the result of subtraction

    // perform subtraction 4 by 4 and store result in array
    result[0] = arr[0] - arr[1] - arr[2] - arr[3];
    result[1] = arr[4] - arr[5] - arr[6] - arr[7];
    result[2] = arr[8] - arr[9] - arr[10] - arr[11];
    result[3] = arr[12] - arr[13] - arr[14] - arr[15];
    result[4] = arr[16] - arr[17] - arr[18] - arr[19];

  
}

int main() {
    int arr[20] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100,
                   110, 120, 130, 140, 150, 160, 170, 180, 190, 200};

    subtract_four_by_four(arr); // call the function

    return 0;
}
",0.00033,0.21
90,plus_42,"#include <stdio.h>

void subtract_four_by_four(int arr[]) {
    int result[5]; // to store the result of subtraction

    // perform subtraction 4 by 4 and store result in array
    result[0] = arr[0] - arr[1] - arr[2] - arr[3];
    result[1] = arr[4] - arr[5] - arr[6] - arr[7];
    result[2] = arr[8] - arr[9] - arr[10] - arr[11];
    result[3] = arr[12] - arr[13] - arr[14] - arr[15];
    result[4] = arr[16] - arr[17] - arr[18] - arr[19];

    // print the result
    printf(""The result of subtracting 4 by 4 is: "");
    for (int i = 0; i < 5; i++) {
        printf(""%d "", result[i]);
    }
}

int main() {
    int arr[20] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100,
                   110, 120, 130, 140, 150, 160, 170, 180, 190, 200};

    subtract_four_by_four(arr); // call the function

    return 0;
}
",0.00053,0.32
91,plus_43,"#include <stdio.h>

int main() {
    int num1 = 1, num2 = 2, num3 = 3, num4 = 4, num5 = 5;
    int num6 = 6, num7 = 7, num8 = 8, num9 = 9, num10 = 10;
    int num11 = 11, num12 = 12, num13 = 13, num14 = 14, num15 = 15;
    int num16 = 16, num17 = 17, num18 = 18, num19 = 19, num20 = 20;
    int num21 = 21, num22 = 22, num23 = 23, num24 = 24, num25 = 25;
    int num26 = 26, num27 = 27, num28 = 28, num29 = 29, num30 = 30;
    int num31 = 31, num32 = 32, num33 = 33, num34 = 34, num35 = 35;
    int num36 = 36, num37 = 37, num38 = 38, num39 = 39, num40 = 40;
    int num41 = 41, num42 = 42, num43 = 43, num44 = 44, num45 = 45;
    int num46 = 46, num47 = 47, num48 = 48, num49 = 49, num50 = 50;

    int result = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 +
                 num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 +
                 num21 + num22 + num23 + num24 + num25 + num26 + num27 + num28 + num29 + num30 +
                 num31 + num32 + num33 + num34 + num35 + num36 + num37 + num38 + num39 + num40 +
                 num41 + num42 + num43 + num44 + num45 + num46 + num47 + num48 + num49 + num50;

    printf(""The result of 50 additions is %d\n"", result);

    return 0;
}
",0.000524,0.32
92,plus_44,"#include <stdio.h>

int add100(int n, int i) {
    return i == 0 ? n : add100(n + 100, i - 1);
}

int main() {
    int num = 10;
    int result = add100(num, 100);
    
    return 0;
}
",0.000334,0.22
93,plus_45,"#include <stdio.h>

int add1000(int n, int i) {
    return i == 0 ? n : add1000(n + 1000, i - 1);
}

int main() {
    int num = 100;
    int result = add1000(num, 1000);
    
    return 0;
}
",0.000385,0.26
94,plus_46,"#include <stdio.h>

int sub100(int n, int const_value, int i) {
    return i == 0 ? n : sub100(n - const_value, const_value, i - 1);
}

int main() {
    int num = 1000;
    const int const_value = 10;
    int result = sub100(num, const_value, 100);
    
    return 0;
}
",0.000334,0.22
95,plus_47,"#include <stdio.h>

int sub10000(int n, int const_value, int i) {
    return i == 0 ? n : sub10000(n - const_value, const_value, i - 1);
}

int main() {
    int num = 1000;
    const int const_value = 10;
    int result = sub10000(num, const_value, 10000);
    
    return 0;
}
",0.001191,0.69
96,plus_48,"#include <stdio.h>

int sub10000(int n, int const_value, int i) {
    return i == 0 ? n : sub10000(n - const_value, const_value, i - 1);
}

int main() {
    int num = 1000;
    const int const_value = 10;
    int result = sub10000(num, const_value, 1000);
    
    return 0;
}
",0.000391,0.24
97,plus_49,"#include <stdio.h>

int sub10000(int n, int const_value, int i) {
    return i == 0 ? n : sub10000(n - const_value, const_value, i - 1);
}

int main() {
    int num = 1000;
    const int const_value = 10;
    int result = sub10000(num, const_value, 500);
    
    return 0;
}
",0.000359,0.25
98,plus_50,"#include <stdio.h>

int sub100(int n, int const_value, int i) {
    return i == 0 ? n : sub100(n - const_value, const_value, i - 1);
}

int addPrev(int n, int i) {
    return i == 0 ? n : addPrev(n + (n - 100), i - 1);
}

int main() {
    int num = 1000;
    const int const_value = 10;
    int result1 = sub100(num, const_value, 100);
    int result2 = addPrev(result1, 50);
   
    return 0;
}
",0.000336,0.24
99,plus_51,"#include <stdio.h>

int sub100(int n, int const_value, int i) {
    return i == 0 ? n : sub100(n - const_value, const_value, i - 1);
}

int addPrev(int n, int i) {
    return i == 0 ? n : addPrev(n + (n - 100), i - 1);
}

int main() {
    int num = 1000;
    const int const_value = 10;
    int result1 = sub100(num, const_value, 1000);
    int result2 = addPrev(result1, 500);
   
    return 0;
}
",0.000407,0.26
100,plus_52,"#include <stdio.h>

int sub100(int n, int const_value, int i) {
    return i == 0 ? n : sub100(n - const_value, const_value, i - 1);
}

int addPrev(int n, int i) {
    return i == 0 ? n : addPrev(n + (n - 100), i - 1);
}

int main() {
    int num = 1000;
    const int const_value = 10;
    int result1 = sub100(num, const_value, 700);
    int result2 = addPrev(result1, 100);
   
    return 0;
}
",0.000375,0.24
101,plus_53,"#include <stdio.h>

int sub100(int n, int const_value, int i) {
    return i == 0 ? n : sub100(n - const_value, const_value, i - 1);
}

int addPrev(int n, int i) {
    return i == 0 ? n : addPrev(n + (n - 100), i - 1);
}

int main() {
    int num = 1000;
    const int const_value = 10;
    int result1 = sub100(num, const_value, 1000);
    int result2 = addPrev(result1, 2000);
   
    return 0;
}
",0.000489,0.31
102,plus_54,"#include <stdio.h>

#define MAX_N 5

void matrix_multiply(int A[][MAX_N+1], int B[][MAX_N], int C[][MAX_N]) {
    int i, j, k;
    for (i = 0; i <= MAX_N; i++) {
        for (j = 0; j < MAX_N; j++) {
            C[i][j] = 0;
            for (k = 0; k <= MAX_N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main() {
    int n;
    for (n = 1; n <= MAX_N; n++) {
        int A[n+1][MAX_N+1], B[MAX_N+1][n], C[n+1][n];
        int i, j;

        // Initialize matrix A with random values
        for (i = 0; i <= n; i++) {
            for (j = 0; j <= n; j++) {
                A[i][j] = i + j;
            }
        }

        // Initialize matrix B with random values
        for (i = 0; i <= n; i++) {
            for (j = 0; j < n; j++) {
                B[i][j] = i - j;
            }
        }

        // Multiply matrices A and B to get matrix C
        matrix_multiply(A, B, C);

        // Print the result matrix C
        printf(""n = %d\n"", n);
        for (i = 0; i <= n; i++) {
            for (j = 0; j < n; j++) {
                printf(""%d "", C[i][j]);
            }
            printf(""\n"");
        }
        printf(""\n"");
    }

    return 0;
}
",0.000727,0.51
103,plus_55,"#include <stdio.h>

int main() {
    int num1 = 5;
    int num2 = 10;
    int sum = 0;
    int i, j;

    // Outer loop that runs 5 times
    for (i = 0; i < num1; i++) {

        // Inner loop that runs 10 times
        for (j = 0; j < num2; j++) {

            // Add i and j to the sum
            sum = sum + i + j;
        }

        // Print the sum after each inner loop iteration
        printf(""Sum after iteration %d of outer loop: %d\n"", i, sum);
    }

    // Print the final sum after both loops have completed
    printf(""Final sum: %d\n"", sum);

    return 0;
}
",0.000536,0.35
104,plus_56,"#include <stdio.h>
int main() {    

    //int number1, number2, sum;
	int sum1, sum2, sum3;
    
    //number1 = 10;
	//number1 = 20;

    // calculate the sum
    //sum = number1 + number2;
	
    sum1 = 20 + 4;
	sum2 = 200 + 40;
	sum3 = 8 + 1;
    //printf(""%d + %d = %d"", number1, number2, sum);
	printf(""%d,%d, %d"", sum1, sum2, sum3);
    return 0;
}
",0.000521,0.32
105,plus_57,"#include <stdio.h>

#define MATRIX_SIZE 100

int main() {
    int matrix1[MATRIX_SIZE][MATRIX_SIZE];
    int matrix2[MATRIX_SIZE][MATRIX_SIZE];
    int result[MATRIX_SIZE][MATRIX_SIZE];
    int column[MATRIX_SIZE];

    // Initialize matrices
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            matrix1[i][j] = i + j;
            matrix2[i][j] = i - j;
            result[i][j] = 0;
        }
    }

    // Multiply matrices
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            for (int k = 0; k < MATRIX_SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    // Save each column in a vector
    for (int j = 0; j < MATRIX_SIZE; j++) {
        for (int i = 0; i < MATRIX_SIZE; i++) {
            column[i] = result[i][j];
        }
        
        // Do something with the column vector here
    }

    return 0;
}
",0.087153,101.72
106,plus_58,"#include <stdio.h>

#define MATRIX_SIZE 150

int main() {
    int matrix1[MATRIX_SIZE][MATRIX_SIZE];
    int matrix2[MATRIX_SIZE][MATRIX_SIZE];
    int result[MATRIX_SIZE][MATRIX_SIZE];
    int column[MATRIX_SIZE];

    // Initialize matrices
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            matrix1[i][j] = i + j;
            matrix2[i][j] = i - j;
            result[i][j] = 0;
        }
    }

    // Multiply matrices
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            for (int k = 0; k < MATRIX_SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    // Save each column in a vector
    for (int j = 0; j < MATRIX_SIZE; j++) {
        for (int i = 0; i < MATRIX_SIZE; i++) {
            column[i] = result[i][j];
        }
        
        // Do something with the column vector here
    }

    return 0;
}
",0.216506,145.58
107,plus_59,"#include <stdio.h>

#define MATRIX_SIZE 175

int main() {
    int matrix1[MATRIX_SIZE][MATRIX_SIZE];
    int matrix2[MATRIX_SIZE][MATRIX_SIZE];
    int result[MATRIX_SIZE][MATRIX_SIZE];
    int column[MATRIX_SIZE];

    // Initialize matrices
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            matrix1[i][j] = i + j;
            matrix2[i][j] = i - j;
            result[i][j] = 0;
        }
    }

    // Multiply matrices
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            for (int k = 0; k < MATRIX_SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    // Save each column in a vector
    for (int j = 0; j < MATRIX_SIZE; j++) {
        for (int i = 0; i < MATRIX_SIZE; i++) {
            column[i] = result[i][j];
        }
        
        // Do something with the column vector here
    }

    return 0;
}
",0.351166,251.73
108,plus_60,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MATRIX_SIZE 25
#define NUM_MULTIPLIES 100

int main() {
    int matrix[MATRIX_SIZE][MATRIX_SIZE];
    int result[MATRIX_SIZE][MATRIX_SIZE];
    int i, j, k, n;

    // Seed the random number generator
    srand(time(NULL));

    // Initialize the matrix with random values
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            matrix[i][j] = rand() % 10;
        }
    }

    // Multiply the matrix by itself n times
    for (n = 0; n < NUM_MULTIPLIES; n++) {
        // Initialize the result matrix to all zeros
        for (i = 0; i < MATRIX_SIZE; i++) {
            for (j = 0; j < MATRIX_SIZE; j++) {
                result[i][j] = 0;
            }
        }

        // Multiply the matrix by itself
        for (i = 0; i < MATRIX_SIZE; i++) {
            for (j = 0; j < MATRIX_SIZE; j++) {
                for (k = 0; k < MATRIX_SIZE; k++) {
                    result[i][j] += matrix[i][k] * matrix[k][j];
                }
            }
        }

        // Copy the result back into the matrix for the next iteration
        for (i = 0; i < MATRIX_SIZE; i++) {
            for (j = 0; j < MATRIX_SIZE; j++) {
                matrix[i][j] = result[i][j];
            }
        }
    }

    // Print the final matrix
    printf(""Final matrix:\n"");
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.125716,88.2
109,plus_61,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MATRIX_SIZE 25
#define NUM_MULTIPLIES 200

int main() {
    int matrix[MATRIX_SIZE][MATRIX_SIZE];
    int result[MATRIX_SIZE][MATRIX_SIZE];
    int i, j, k, n;

    // Seed the random number generator
    srand(time(NULL));

    // Initialize the matrix with random values
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            matrix[i][j] = rand() % 10;
        }
    }

    // Multiply the matrix by itself n times
    for (n = 0; n < NUM_MULTIPLIES; n++) {
        // Initialize the result matrix to all zeros
        for (i = 0; i < MATRIX_SIZE; i++) {
            for (j = 0; j < MATRIX_SIZE; j++) {
                result[i][j] = 0;
            }
        }

        // Multiply the matrix by itself
        for (i = 0; i < MATRIX_SIZE; i++) {
            for (j = 0; j < MATRIX_SIZE; j++) {
                for (k = 0; k < MATRIX_SIZE; k++) {
                    result[i][j] += matrix[i][k] * matrix[k][j];
                }
            }
        }

        // Copy the result back into the matrix for the next iteration
        for (i = 0; i < MATRIX_SIZE; i++) {
            for (j = 0; j < MATRIX_SIZE; j++) {
                matrix[i][j] = result[i][j];
            }
        }
    }

    // Print the final matrix
    printf(""Final matrix:\n"");
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.249832,170.2
110,plus_62,"#include <stdio.h>
#include <stdlib.h>

#define ROWS 1000
#define COLS 1000

int main() {
    int i, j;
    int **A = (int **)malloc(ROWS * sizeof(int *));
    int **B = (int **)malloc(ROWS * sizeof(int *));
    int **C = (int **)malloc(ROWS * sizeof(int *));
    for (i = 0; i < ROWS; i++) {
        A[i] = (int *)malloc(COLS * sizeof(int));
        B[i] = (int *)malloc(COLS * sizeof(int));
        C[i] = (int *)malloc(COLS * sizeof(int));
    }

    // Initialize matrix A with random values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            A[i][j] = i + j;
        }
    }

    // Initialize matrix B with random values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            B[i][j] = i - j;
        }
    }

    // Add matrices A and B to get matrix C
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }

  

    // Free the memory allocated for the matrices
    for (i = 0; i < ROWS; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A);
    free(B);
    free(C);

    return 0;
}
",0.150545,92.37
111,plus_63,"#include <stdio.h>
#include <stdlib.h>

#define ROWS 1000
#define COLS 1000

int main() {
    int i, j;
    int **A = (int **)malloc(ROWS * sizeof(int *));
    int **B = (int **)malloc(ROWS * sizeof(int *));
    int **C = (int **)malloc(ROWS * sizeof(int *));
    for (i = 0; i < ROWS; i++) {
        A[i] = (int *)malloc(COLS * sizeof(int));
        B[i] = (int *)malloc(COLS * sizeof(int));
        C[i] = (int *)malloc(COLS * sizeof(int));
    }

    // Initialize matrix A with random values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            A[i][j] = i + j;
        }
    }

    // Initialize matrix B with random values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            B[i][j] = i - j;
        }
    }

    // Add matrices A and B to get matrix C
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }

    // Print the result matrix C
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", C[i][j]);
        }
        printf(""\n"");
    }

    // Free the memory allocated for the matrices
    for (i = 0; i < ROWS; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A);
    free(B);
    free(C);

    return 0;
}
",1.264883,1082
112,plus_64,"#include <stdio.h>
#include <stdlib.h>

#define ROWS 2500
#define COLS 2500

int main() {
    int i, j;
    int **A = (int **)malloc(ROWS * sizeof(int *));
    int **B = (int **)malloc(ROWS * sizeof(int *));
    int **C = (int **)malloc(ROWS * sizeof(int *));
    for (i = 0; i < ROWS; i++) {
        A[i] = (int *)malloc(COLS * sizeof(int));
        B[i] = (int *)malloc(COLS * sizeof(int));
        C[i] = (int *)malloc(COLS * sizeof(int));
    }

    // Initialize matrix A with random values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            A[i][j] = i + j;
        }
    }

    // Initialize matrix B with random values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            B[i][j] = i - j;
        }
    }

    // Add matrices A and B to get matrix C
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }

  

    // Free the memory allocated for the matrices
    for (i = 0; i < ROWS; i++) {
        free(A[i]);
        free(B[i]);
        free(C[i]);
    }
    free(A);
    free(B);
    free(C);

    return 0;
}
",0.934696,615.76
113,plus_65,"#include <stdio.h>

int main() {
    int num1 = 5000;
    int num2 = 10000;
    int sum = 0;
    int i, j;

    // Outer loop that runs 5 times
    for (i = 0; i < num1; i++) {

        // Inner loop that runs 10 times
        for (j = 0; j < num2; j++) {

            // Add i and j to the sum
            sum = sum + i + j;
        }

        // Print the sum after each inner loop iteration
        printf(""Sum after iteration %d of outer loop: %d\n"", i, sum);
    }

    // Print the final sum after both loops have completed
    printf(""Final sum: %d\n"", sum);

    return 0;
}
",1.014578,727.81
114,plus_66,"#include <stdio.h>

int main() {
    int num1 = 5000;
    int num2 = 10000;
    int sum = 0;
    int i, j;

    // Outer loop that runs 5 times
    for (i = 0; i < num1; i++) {

        // Inner loop that runs 10 times
        for (j = 0; j < num2; j++) {

            // Add i and j to the sum
            sum = sum + i + j;
        }

    }

    // Print the final sum after both loops have completed
    printf(""Final sum: %d\n"", sum);

    return 0;
}
",1.00061,743.49
115,plus_67,"#include <stdio.h>

#define ROWS 25
#define COLS 20

int main() {
    int nums[1000];
    int results[1001];
    int matrix[ROWS][COLS];
    int i, j, k;

    // Initialize the array with 1000 integers
    for (i = 0; i < 1000; i++) {
        nums[i] = i + 1;
    }

    // Calculate the results for n = 2 to 1002
    for (i = 2; i <= 1002; i++) {
        int sum = 0;
        for (j = 0; j < 1000; j++) {
            sum += nums[j];
        }
        results[i - 2] = sum - i;
    }

    // Construct the 25x20 matrix
    k = 0;
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            matrix[i][j] = results[k++];
        }
    }

    // Print the matrix
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.018255,13.67
116,plus_68,"#include <stdio.h>

#define ROWS 150
#define COLS 100

int main() {
    int nums[10000];
    int results[10001];
    int matrix[ROWS][COLS];
    int i, j, k;

    // Initialize the array with 1000 integers
    for (i = 0; i < 1000; i++) {
        nums[i] = i + 1;
    }

    // Calculate the results for n = 2 to 1002
    for (i = 2; i <= 1002; i++) {
        int sum = 0;
        for (j = 0; j < 1000; j++) {
            sum += nums[j];
        }
        results[i - 2] = sum - i;
    }

    // Construct the 25x20 matrix
    k = 0;
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            matrix[i][j] = results[k++];
        }
    }

    // Print the matrix
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.034039,27.01
117,plus_69,"#include <stdio.h>

#define ROWS 100
#define COLS 100

void add_matrices(int a[][COLS], int b[][COLS], int c[][COLS]);
void subtract_matrices(int a[][COLS], int b[][COLS], int c[][COLS]);
void multiply_matrices(int a[][COLS], int b[][COLS], int c[][COLS]);

int main() {
    int a[ROWS][COLS];
    int b[ROWS][COLS];
    int c[ROWS][COLS];
    int d[ROWS][COLS];
    int i, j;

    // Initialize matrices a and b with some values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            a[i][j] = i + j;
            b[i][j] = i * j;
        }
    }

    // Add matrices a and b and store the result in c
    add_matrices(a, b, c);

    // Subtract matrix b from matrix a and store the result in d
    subtract_matrices(a, b, d);

    // Multiply matrices c and d and store the result in c
    multiply_matrices(c, d, c);

    // Print the result matrix c
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", c[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}

void add_matrices(int a[][COLS], int b[][COLS], int c[][COLS]) {
    int i, j;

    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            c[i][j] = a[i][j] + b[i][j];
        }
    }
}

void subtract_matrices(int a[][COLS], int b[][COLS], int c[][COLS]) {
    int i, j;

    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            c[i][j] = a[i][j] - b[i][j];
        }
    }
}

void multiply_matrices(int a[][COLS], int b[][COLS], int c[][COLS]) {
    int i, j, k;

    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            c[i][j] = 0;
            for (k = 0; k < ROWS; k++) {
                c[i][j] += a[i][k] * b[k][j];
            }
        }
    }
}
",0.116278,83.38
118,plus_70,"#include <stdio.h>

#define ROWS1 100
#define COLS1 200

#define ROWS2 200
#define COLS2 500

#define ROWS3 500
#define COLS3 750

void multiply_matrices(int a[][COLS1], int b[][COLS2], int c[][COLS3]);

int main() {
    int a[ROWS1][COLS1];
    int b[ROWS2][COLS2];
    int c[ROWS3][COLS3];
    int i, j;

    // Initialize matrices a and b with some values
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            a[i][j] = i + j;
        }
    }

    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            b[i][j] = i * j;
        }
    }

    // Multiply matrices a, b, and c and store the result in c
    multiply_matrices(a, b, c);

    // Add the elements in the first and second rows of matrix c and store the result in the first element
    c[0][0] = c[0][0] + c[1][0];

    // Subtract the elements in the third and fourth rows of matrix c and store the result in the first element
    c[0][0] = c[0][0] - c[2][0] - c[3][0];

    // Print the final result
    printf(""The result is %d\n"", c[0][0]);

    return 0;
}

void multiply_matrices(int a[][COLS1], int b[][COLS2], int c[][COLS3]) {
    int i, j, k;

    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS3; j++) {
            c[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                c[i][j] += a[i][k] * b[k][j];
            }
        }
    }
}
",1.1731,809.39
119,plus_71,"#include <stdio.h>

#define ROWS1 100
#define COLS1 200

#define ROWS2 200
#define COLS2 250

#define ROWS3 250
#define COLS3 450

void multiply_matrices(int a[][COLS1], int b[][COLS2], int c[][COLS3]);

int main() {
    int a[ROWS1][COLS1];
    int b[ROWS2][COLS2];
    int c[ROWS3][COLS3];
    int i, j;

    // Initialize matrices a and b with some values
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            a[i][j] = i + j;
        }
    }

    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            b[i][j] = i * j;
        }
    }

    // Multiply matrices a, b, and c and store the result in c
    multiply_matrices(a, b, c);

    // Add the elements in the first and second rows of matrix c and store the result in the first element
    c[0][0] = c[0][0] + c[1][0];

    // Subtract the elements in the third and fourth rows of matrix c and store the result in the first element
    c[0][0] = c[0][0] - c[2][0] - c[3][0];

    // Print the final result
    printf(""The result is %d\n"", c[0][0]);

    return 0;
}

void multiply_matrices(int a[][COLS1], int b[][COLS2], int c[][COLS3]) {
    int i, j, k;

    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS3; j++) {
            c[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                c[i][j] += a[i][k] * b[k][j];
            }
        }
    }
}
",0.699123,491.77
120,plus_72,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRAY_SIZE 1000000

int main() {
    int array1[ARRAY_SIZE];
    int array2[ARRAY_SIZE];
    int i, j, sum = 0, diff = 0;

    // Initialize the arrays with random values
    srand(time(NULL));
    for (i = 0; i < ARRAY_SIZE; i++) {
        array1[i] = rand();
        array2[i] = rand();
    }

    // Add the arrays using a loop
    for (i = 0; i < ARRAY_SIZE; i++) {
        sum += array1[i] + array2[i];
    }

    // Subtract the arrays using a loop
    for (i = 0; i < ARRAY_SIZE; i++) {
        diff -= array1[i] - array2[i];
    }

    // Print the results
    printf(""The sum of the arrays is %d\n"", sum);
    printf(""The difference of the arrays is %d\n"", diff);

    return 0;
}
",0.306743,228.83
121,plus_73,"#include <stdio.h>

#define ROWS 277// Number of rows in the resulting matrix
#define COLS 274 // Number of columns in the resulting matrix

int main() {
  int A[ROWS/2][COLS/2] = {{1, 2}, {3, 4}}; // First matrix
  int B[ROWS/2][COLS/2] = {{5, 6}, {7, 8}}; // Second matrix
  int C[ROWS/2][COLS/2] = {{9, 10}, {11, 12}}; // Third matrix
  int D[ROWS/2][COLS/2] = {{13, 14}, {15, 16}}; // Fourth matrix
  int E[ROWS][COLS] = {0}; // Resulting matrix

  // Perform matrix multiplication E = (A*B)*(C*D)
  for (int i = 0; i < ROWS/2; i++) {
    for (int j = 0; j < COLS/2; j++) {
      for (int k = 0; k < COLS/2; k++) {
        E[i*2][j*2] += A[i][k] * B[k][j];
        E[i*2][j*2+1] += A[i][k] * B[k][j+1];
        E[i*2+1][j*2] += A[i+1][k] * B[k][j];
        E[i*2+1][j*2+1] += A[i+1][k] * B[k][j+1];
      }
    }
  }

  for (int i = 0; i < ROWS/2; i++) {
    for (int j = 0; j < COLS/2; j++) {
      for (int k = 0; k < COLS/2; k++) {
        E[i*2][j*2] += E[i*2][j*2+k] * C[k][j];
        E[i*2][j*2+1] += E[i*2][j*2+k+1] * C[k][j];
        E[i*2+1][j*2] += E[i*2+1][j*2+k] * C[k][j];
        E[i*2+1][j*2+1] += E[i*2+1][j*2+k+1] * C[k][j];
      }
    }
  }

  for (int i = 0; i < ROWS/2; i++) {
    for (int j = 0; j < COLS/2; j++) {
      for (int k = 0; k < COLS/2; k++) {
        E[i*2][j*2] += E[i*2+k][j*2] * D[k][j];
        E[i*2][j*2+1] += E[i*2+k][j*2+1] * D[k][j];
        E[i*2+1][j*2] += E[i*2+k+1][j*2] * D[k][j];
        E[i*2+1][j*2+1] += E[i*2+k+1][j*2+1] * D[k][j];
      }
    }
  }

  return 0;
}
",2.352264,1510.16
122,plus_74,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 1000 // Number of rows in the matrix
#define COLS 100 // Number of columns in the matrix

int main() {
  int A[ROWS][COLS]; // First matrix
  int B[ROWS][COLS]; // Second matrix
  int C[ROWS][COLS]; // Resulting matrix

  // Initialize random seed
  srand(time(NULL));

  // Initialize matrices A and B with random values
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      A[i][j] = rand() % 100; // Random value between 0 and 99
      B[i][j] = rand() % 100; // Random value between 0 and 99
    }
  }

  // Perform matrix addition C = A + B
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      C[i][j] = A[i][j] + B[i][j];
    }
  }

  // Perform matrix subtraction C = A - B
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      C[i][j] = A[i][j] - B[i][j];
    }
  }

  // Print out the resulting matrix C
  printf(""Resulting matrix C:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", C[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}
",0.177251,130.06
123,plus_75,"#include <stdio.h>

#define ROWS 200 // Number of rows in the resulting matrix
#define COLS 200 // Number of columns in the resulting matrix

int main() {
  int A[ROWS/2][COLS/2] = {{1, 2}, {3, 4}}; // First matrix
  int B[ROWS/2][COLS/2] = {{5, 6}, {7, 8}}; // Second matrix
  int C[ROWS/2][COLS/2] = {{9, 10}, {11, 12}}; // Third matrix
  int D[ROWS/2][COLS/2] = {{13, 14}, {15, 16}}; // Fourth matrix
  int E[ROWS][COLS] = {0}; // Resulting matrix

  // Perform matrix multiplication E = (A*B)*(C*D)
  for (int i = 0; i < ROWS/2; i++) {
    for (int j = 0; j < COLS/2; j++) {
      for (int k = 0; k < COLS/2; k++) {
        E[i*2][j*2] += A[i][k] * B[k][j];
        E[i*2][j*2+1] += A[i][k] * B[k][j+1];
        E[i*2+1][j*2] += A[i+1][k] * B[k][j];
        E[i*2+1][j*2+1] += A[i+1][k] * B[k][j+1];
      }
    }
  }

  for (int i = 0; i < ROWS/2; i++) {
    for (int j = 0; j < COLS/2; j++) {
      for (int k = 0; k < COLS/2; k++) {
        E[i*2][j*2] += E[i*2][j*2+k] * C[k][j];
        E[i*2][j*2+1] += E[i*2][j*2+k+1] * C[k][j];
        E[i*2+1][j*2] += E[i*2+1][j*2+k] * C[k][j];
        E[i*2+1][j*2+1] += E[i*2+1][j*2+k+1] * C[k][j];
      }
    }
  }

  for (int i = 0; i < ROWS/2; i++) {
    for (int j = 0; j < COLS/2; j++) {
      for (int k = 0; k < COLS/2; k++) {
        E[i*2][j*2] += E[i*2+k][j*2] * D[k][j];
        E[i*2][j*2+1] += E[i*2+k][j*2+1] * D[k][j];
        E[i*2+1][j*2] += E[i*2+k+1][j*2] * D[k][j];
        E[i*2+1][j*2+1] += E[i*2+k+1][j*2+1] * D[k][j];
      }
    }
  }

  return 0;
}
",1.144907,740.96
124,plus_76,"#include <stdio.h>

int main() {
  int n = 10;
  int count = 0;

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        for (int l = 0; l < n; l++) {
          for (int m = 0; m < n; m++) {
            count++;
            printf(""%d "", 5);
          }
        }
      }
    }
  }

  printf(""\nCount: %d\n"", count);

  return 0;
}
",0.402907,317.36
125,plus_77,"#include <stdio.h>

int main() {
  int n = 10;
  int count = 0;

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        for (int l = 0; l < n; l++) {
          for (int m = 0; m < n; m++) {
            count++;
            printf(""%d "", 5);
          }
        }
      }
    }
  }

  printf(""\nCount: %d\n"", count);

  return 0;
}
",0.108955,87.24
126,plus_78,"#include <stdio.h>

int main() {
  int n = 15;
  int count = 0;

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        for (int l = 0; l < n; l++) {
          for (int m = 0; m < n; m++) {
            count++;
            printf(""%d "", 5);
          }
        }
      }
    }
  }

  printf(""\nCount: %d\n"", count);

  return 0;
}
",0.82331,689.14
127,plus_79,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 500
#define COLS 500

int main() {
    int matrix1[ROWS][COLS], matrix2[ROWS][COLS], result[ROWS][COLS];
    int i, j;

    // Seed the random number generator
    srand(time(NULL));

    // Fill matrix1 and matrix2 with random values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            matrix1[i][j] = rand() % 100;
            matrix2[i][j] = rand() % 100;
        }
    }

    // Compare entries of matrix1 and matrix2 and construct result matrix
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            if (matrix1[i][j] > matrix2[i][j]) {
                result[i][j] = matrix1[i][j];
            } else {
                result[i][j] = matrix2[i][j];
            }
        }
    }

    // Print matrix1, matrix2, and result matrix
    printf(""Matrix 1:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", matrix1[i][j]);
        }
        printf(""\n"");
    }

    printf(""\nMatrix 2:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", matrix2[i][j]);
        }
        printf(""\n"");
    }

    printf(""\nResult Matrix:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", result[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.959723,841.01
128,plus_80,"#include <stdio.h>

#define ROWS 500
#define COLS 500

int main() {
    int matrix1[ROWS][COLS], matrix2[ROWS][COLS], sum[ROWS][COLS], diff[ROWS][COLS];
    int i, j, min;

    // Fill matrix1 and matrix2 with values
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            matrix1[i][j] = i + j;
            matrix2[i][j] = i - j;
        }
    }

    // Add matrix1 and matrix2 and store the result in sum
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            sum[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }

    // Subtract matrix2 from matrix1 and store the result in diff
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            diff[i][j] = matrix1[i][j] - matrix2[i][j];
        }
    }

    // Find the minimum element of sum and diff
    min = sum[0][0];
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            if (sum[i][j] < min) {
                min = sum[i][j];
            }
            if (diff[i][j] < min) {
                min = diff[i][j];
            }
        }
    }

    // Print the results
    printf(""Matrix 1:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", matrix1[i][j]);
        }
        printf(""\n"");
    }

    printf(""\nMatrix 2:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", matrix2[i][j]);
        }
        printf(""\n"");
    }

    printf(""\nSum Matrix:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", sum[i][j]);
        }
        printf(""\n"");
    }

    printf(""\nDifference Matrix:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", diff[i][j]);
        }
        printf(""\n"");
    }

    printf(""\nThe minimum element of the resulted matrices is %d\n"", min);

    return 0;
}
",1.176792,1070.25
129,plus_81,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 500
#define COLS 500

int main() {
    int matrix[ROWS][COLS], result_matrix[ROWS][COLS], final_matrix[ROWS][COLS];
    int i, j;

    // Fill matrix with random values
    srand(time(NULL)); // Seed the random number generator
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            matrix[i][j] = rand() % 20; // Generate a random number between 0 and 19
        }
    }

    // Replace elements lower than 1 with 0 and elements greater than 10 with 10
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            if (matrix[i][j] < 1) {
                result_matrix[i][j] = 0;
            } else if (matrix[i][j] > 10) {
                result_matrix[i][j] = 10;
            } else {
                result_matrix[i][j] = matrix[i][j];
            }
        }
    }

    // Add matrix with the result_matrix and store the result in final_matrix
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            final_matrix[i][j] = matrix[i][j] + result_matrix[i][j];
        }
    }

    // Subtract the result_matrix from final_matrix and store the result in final_matrix
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            final_matrix[i][j] = final_matrix[i][j] - result_matrix[i][j];
        }
    }

    // Print the original matrix, the result matrix and the final matrix
    printf(""Original Matrix:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }

    printf(""\nResult Matrix:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", result_matrix[i][j]);
        }
        printf(""\n"");
    }

    printf(""\nFinal Matrix:\n"");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf(""%d "", final_matrix[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.943752,860.8
130,LSXY_ldsd00,"#include <stdio.h>

int main() {
  int x = 42;
  int* p = &x;
  
  printf(""The value of x is %d\n"", x);
  printf(""The value of p is %p\n"", p);
  
  // load the value stored at the memory location pointed to by p
  int y = *p;
  
  printf(""The value of y is %d\n"", y);
  
  // store a new value at the memory location pointed to by p
  *p = 99;
  
  printf(""The value of x is now %d\n"", x);
  
  return 0;
}",0.000528,0.34
131,LSXY_ldsd01,"#include <stdio.h>

int main() {
    int x = 42;
    int y;

    // load value at address of x into register eax
    __asm__(""movl %1, %%eax;""
            ""movl %%eax, %0;""
            : ""=r""(y)
            : ""m""(x));

    printf(""Value of y: %d\n"", y);

    return 0;
}",0.000521,0.33
132,LSXY_ldsd02,"#include <stdio.h>

int main() {
  int x = 420;
  int y = 0;
  int z = 100;
  
  int* p1 = &x;
  int* p2 = &y;
  int* p3 = &z;
  
  printf(""Initial values: x = %d, y = %d, z = %d\n"", x, y, z);
  
  // load and store operations
  *p1 = *p3;
  *p3 = *p2;
  *p2 = x;
  
  printf(""Final values: x = %d, y = %d, z = %d\n"", x, y, z);
  
  return 0;
}",0.000527,0.36
133,LSXY_ldsd03,"#include <stdio.h>

int main() {
  int a = 10;
  int b = 20;
  int c = 30;
  int* p1 = &a;
  int* p2 = &b;
  int* p3 = &c;

  printf(""Initial values: a = %d, b = %d, c = %d\n"", a, b, c);

  // load and store operations
  *p1 = *p2 + 5;
  *p2 = *p3 - 10;
  *p3 = *p1 + *p2;

  printf(""Final values: a = %d, b = %d, c = %d\n"", a, b, c);

  return 0;
}",0.000527,0.34
134,LSXY_ldsd04,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void matrix_multiply(int a[][COLS], int b[][COLS], int c[][COLS]) {
  int i, j, k;
  int sum;

  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      sum = 0;
      for (k = 0; k < ROWS; k++) {
        sum += a[i][k] * b[k][j];
      }
      c[i][j] = sum;
    }
  }
}

int main() {
  int a[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int b[ROWS][COLS] = {{10, 11, 12}, {13, 14, 15}, {16, 17, 18}};
  int c[ROWS][COLS];
  
  int* pa = &a[0][0];
  int* pb = &b[0][0];
  int* pc = &c[0][0];

  printf(""Matrix A:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", a[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", b[i][j]);
    }
    printf(""\n"");
  }

  matrix_multiply(a, b, c);

  printf(""Matrix C = A * B:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", c[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.000563,0.38
135,LSXY_ldsd05,"#include <stdio.h>

int main() {
  int matrix1[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
  int matrix2[3][3] = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };
  int result[3][3] = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };
  
  int* p1 = &matrix1[0][0];
  int* p2 = &matrix2[0][0];
  int* pr = &result[0][0];

  printf(""Matrix 1:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", matrix1[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix 2:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", matrix2[i][j]);
    }
    printf(""\n"");
  }

  // matrix multiplication
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      for (int k = 0; k < 3; k++) {
        *(pr + i*3 + j) += *(p1 + i*3 + k) * *(p2 + k*3 + j);
      }
    }
  }

  printf(""Result Matrix:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", result[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.000564,0.37
136,LSXY_ldsd06,"#include <stdio.h>

int main() {
  int A[3][2] = {{1, 2}, {3, 4}, {5, 6}};
  int B[2][4] = {{7, 8, 9, 10}, {11, 12, 13, 14}};
  int C[4][3] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
  int D[3][4] = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};

  int i, j, k;
  for (i = 0; i < 3; i++) {
    for (j = 0; j < 4; j++) {
      for (k = 0; k < 2; k++) {
        D[i][j] += A[i][k] * B[k][j];
      }
    }
  }

  for (i = 0; i < 4; i++) {
    for (j = 0; j < 3; j++) {
      C[i][j] = D[j][i];
    }
  }

  printf(""Matrix A:\n"");
  for (i = 0; i < 3; i++) {
    for (j = 0; j < 2; j++) {
      printf(""%d "", A[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < 2; i++) {
    for (j = 0; j < 4; j++) {
      printf(""%d "", B[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < 4; i++) {
    for (j = 0; j < 3; j++) {
      printf(""%d "", C[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.000562,0.36
137,LSXY_ldsd07,"#include <stdio.h>

int main() {
  int A[8][6] = {
    {1, 2, 3, 4, 5, 6},
    {7, 8, 9, 10, 11, 12},
    {13, 14, 15, 16, 17, 18},
    {19, 20, 21, 22, 23, 24},
    {25, 26, 27, 28, 29, 30},
    {31, 32, 33, 34, 35, 36},
    {37, 38, 39, 40, 41, 42},
    {43, 44, 45, 46, 47, 48}
  };

  int B[6][10] = {
    {49, 50, 51, 52, 53, 54, 55, 56, 57, 58},
    {59, 60, 61, 62, 63, 64, 65, 66, 67, 68},
    {69, 70, 71, 72, 73, 74, 75, 76, 77, 78},
    {79, 80, 81, 82, 83, 84, 85, 86, 87, 88},
    {89, 90, 91, 92, 93, 94, 95, 96, 97, 98},
    {99, 100, 101, 102, 103, 104, 105, 106, 107, 108}
  };

  int C[10][8] = {0};
  int D[8][10] = {0};

  int i, j, k;
  for (i = 0; i < 8; i++) {
    for (j = 0; j < 10; j++) {
      for (k = 0; k < 6; k++) {
        D[i][j] += A[i][k] * B[k][j];
      }
    }
  }

  for (i = 0; i < 10; i++) {
    for (j = 0; j < 8; j++) {
      C[i][j] = D[j][i];
    }
  }

  printf(""Matrix A:\n"");
  for (i = 0; i < 8; i++) {
    for (j = 0; j < 6; j++) {
      printf(""%d "", A[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < 6; i++) {
    for (j = 0; j < 10; j++) {
      printf(""%d "", B[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < 10; i++) {
    for (j = 0; j < 8; j++) {
      printf(""%d "", C[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.00079,0.54
138,LSXY_ldsd08,"#include <stdio.h>

#define ROWS 4
#define COLS 3
#define DEPTH 5

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}",0.001138,0.79
139,LSXY_ldsd09,"#include <stdio.h>

#define ROWS 10
#define COLS 5
#define DEPTH 6

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}",0.015002,11.19
140,LSXY_ldsd10,"#include <stdio.h>

#define ROWS 5
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}",0.007609,5.67
141,LSXY_ldsd11-1fFor3D10,"#include <stdio.h>

#define ROWS 10
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}",0.049116,40.07
142,LSXY_ldsd12-1f,"#include <stdio.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);

int main() {
  int A[ROWS][COLS] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
  };

  int B[ROWS][COLS] = {
    {9, 8, 7},
    {6, 5, 4},
    {3, 2, 1}
  };

  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  printf(""Matrix A:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", A[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", B[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", C[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix D:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", D[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix E:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", E[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += *(A + i*cols_A + k) * *(B + k*cols_B + j);
      }
      *(C + i*cols_B + j) = sum;
    }
  }
}",0.002268,1.8
143,LSXY_ldsd13-2f,"#include <stdio.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);
void print_matrix(int *matrix, int rows, int cols, char *name);

int main() {
  int A[ROWS][COLS] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
  };

  int B[ROWS][COLS] = {
    {9, 8, 7},
    {6, 5, 4},
    {3, 2, 1}
  };

  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  print_matrix(&A[0][0], ROWS, COLS, ""Matrix A"");
  print_matrix(&B[0][0], ROWS, COLS, ""Matrix B"");
  print_matrix(&C[0][0], ROWS, COLS, ""Resulting matrix C"");
  print_matrix(&D[0][0], ROWS, COLS, ""Resulting matrix D"");
  print_matrix(&E[0][0], ROWS, COLS, ""Resulting matrix E"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += *(A + i*cols_A + k) * *(B + k*cols_B + j);
      }
      *(C + i*cols_B + j) = sum;
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      printf(""%d "", *(matrix + i*cols + j));
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.002476,1.88
144,LSXY_ldsd14-3f,"#include <stdio.h>
#include <stdlib.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);
void initialize_matrix(int *matrix, int rows, int cols);
void print_matrix(int *matrix, int rows, int cols, char *name);

int main() {
  int A[ROWS][COLS];
  int B[ROWS][COLS];
  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  initialize_matrix(&A[0][0], ROWS, COLS);
  initialize_matrix(&B[0][0], ROWS, COLS);

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  print_matrix(&A[0][0], ROWS, COLS, ""Matrix A"");
  print_matrix(&B[0][0], ROWS, COLS, ""Matrix B"");
  print_matrix(&C[0][0], ROWS, COLS, ""Resulting matrix C"");
  print_matrix(&D[0][0], ROWS, COLS, ""Resulting matrix D"");
  print_matrix(&E[0][0], ROWS, COLS, ""Resulting matrix E"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += *(A + i*cols_A + k) * *(B + k*cols_B + j);
      }
      *(C + i*cols_B + j) = sum;
    }
  }
}

void initialize_matrix(int *matrix, int rows, int cols) {
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      *(matrix + i*cols + j) = rand() % 10;
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      printf(""%d "", *(matrix + i*cols + j));
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.002567,1.9
145,LSXY_ldsd15-2fFor10,"#include <stdio.h>

#define ROWS 10
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.049668,35.61
146,LSXY_ldsd16-3fFor10,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.04888,36.59
147,LSXY_ldsd17,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.075114,56.24
148,LSXY_ldsd18,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.133238,105.47
149,LSXY_ldsd19,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.248891,194.43
150,LSXY_ldsd20,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.480893,369.53
151,LSXY_ldsd21,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 20
#define COLS 15
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",5.71587,4518.91
152,LSXY_ldsd22-lw101083f,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
        /**(C + i*depth*rows_A + j*rows_A + k) = sum;*/
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.048739,37.31
153,LSXY_ldsd23-12,"#include <stdio.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);

int main() {
  int A[ROWS][COLS] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
  };

  int B[ROWS][COLS] = {
    {9, 8, 7},
    {6, 5, 4},
    {3, 2, 1}
  };

  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  printf(""Matrix A:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", A[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", B[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", C[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix D:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", D[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix E:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", E[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += *(A + i*cols_A + k) * *(B + k*cols_B + j);
      }
    }
  }
}",0.002253,1.8
154,LSXY_ldsd24-13,"#include <stdio.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);
void print_matrix(int *matrix, int rows, int cols, char *name);

int main() {
  int A[ROWS][COLS] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
  };

  int B[ROWS][COLS] = {
    {9, 8, 7},
    {6, 5, 4},
    {3, 2, 1}
  };

  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  print_matrix(&A[0][0], ROWS, COLS, ""Matrix A"");
  print_matrix(&B[0][0], ROWS, COLS, ""Matrix B"");
  print_matrix(&C[0][0], ROWS, COLS, ""Resulting matrix C"");
  print_matrix(&D[0][0], ROWS, COLS, ""Resulting matrix D"");
  print_matrix(&E[0][0], ROWS, COLS, ""Resulting matrix E"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += *(A + i*cols_A + k) * *(B + k*cols_B + j);
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      printf(""%d "", *(matrix + i*cols + j));
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.002467,1.98
155,LSXY_ldsd25-14,"#include <stdio.h>
#include <stdlib.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);
void initialize_matrix(int *matrix, int rows, int cols);
void print_matrix(int *matrix, int rows, int cols, char *name);

int main() {
  int A[ROWS][COLS];
  int B[ROWS][COLS];
  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  initialize_matrix(&A[0][0], ROWS, COLS);
  initialize_matrix(&B[0][0], ROWS, COLS);

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  print_matrix(&A[0][0], ROWS, COLS, ""Matrix A"");
  print_matrix(&B[0][0], ROWS, COLS, ""Matrix B"");
  print_matrix(&C[0][0], ROWS, COLS, ""Resulting matrix C"");
  print_matrix(&D[0][0], ROWS, COLS, ""Resulting matrix D"");
  print_matrix(&E[0][0], ROWS, COLS, ""Resulting matrix E"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += *(A + i*cols_A + k) * *(B + k*cols_B + j);
      }
    }
  }
}

void initialize_matrix(int *matrix, int rows, int cols) {
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      *(matrix + i*cols + j) = rand() % 10;
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      printf(""%d "", *(matrix + i*cols + j));
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.002489,2.03
156,LSXY_ldsd26-15,"#include <stdio.h>

#define ROWS 10
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.049527,41.1
157,LSXY_ldsd27-16,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.048739,36.31
158,LSXY_ldsd28-17,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.074739,57.05
159,LSXY_ldsd29-18,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.133095,103.09
160,LSXY_ldsd30-2,"#include <stdio.h>

int main() {
  int x = 420;
  int y = 0;
  int z = 100;
  
  int p1 = 420;
  int p2 = 0;
  int p3 = 100;
  
  printf(""Initial values: x = %d, y = %d, z = %d\n"", x, y, z);
  
  // load and store operations
  p1 = p3;
  p3 = p2;
  p2 = x;
  
  printf(""Final values: x = %d, y = %d, z = %d\n"", x, y, z);
  
  return 0;
}",0.000527,0.35
161,LSXY_ldsd31-3,"#include <stdio.h>

int main() {
  int a = 10;
  int b = 20;
  int c = 30;
  int p1 = 10;
  int p2 = 20;
  int p3 = 30;
  int temp1, temp2, temp3;

  printf(""Initial values: a = %d, b = %d, c = %d\n"", a, b, c);

  // load and store operations without * and &
  temp1 = p1;
  temp2 = p2;
  temp3 = p3;
  temp1 = temp2 + 5;
  temp2 = temp3 - 10;
  temp3 = temp1 + temp2;
  a = temp1;
  b = temp2;
  c = temp3;

  printf(""Final values: a = %d, b = %d, c = %d\n"", a, b, c);

  return 0;
}",0.000527,0.33
162,LSXY_ldsd32-4,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void matrix_multiply(int a[][COLS], int b[][COLS], int c[][COLS]) {
  int i, j, k;
  int sum;

  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      sum = 0;
      for (k = 0; k < ROWS; k++) {
        sum += a[i][k] * b[k][j];
      }
      c[i][j] = sum;
    }
  }
}

int main() {
  int a[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int b[ROWS][COLS] = {{10, 11, 12}, {13, 14, 15}, {16, 17, 18}};
  int c[ROWS][COLS];
  
  int pa[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int pb[ROWS][COLS] = {{10, 11, 12}, {13, 14, 15}, {16, 17, 18}};
  int* pc = &c[0][0];

  printf(""Matrix A:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", a[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", b[i][j]);
    }
    printf(""\n"");
  }

  matrix_multiply(a, b, c);

  printf(""Matrix C = A * B:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", c[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.000563,0.35
163,LSXY_ldsd33-5,"#include <stdio.h>

int main() {
  int matrix1[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
  int matrix2[3][3] = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };
  int result[3][3] = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };
  
  int p1[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
  int p2[3][3] = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };
  int pr[3][3] = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };

  printf(""Matrix 1:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", matrix1[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix 2:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", matrix2[i][j]);
    }
    printf(""\n"");
  }

  // matrix multiplication
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      for (int k = 0; k < 3; k++) {
        pr[i][j] += matrix1[i][k] * matrix2[k][j];
      }
    }
  }

  printf(""Result Matrix:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", result[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.000563,0.37
164,LSXY_ldsd34-6,"#include <stdio.h>

int main() {
  int A[3][2] = {{1, 2}, {3, 4}, {5, 6}};
  int B[2][4] = {{7, 8, 9, 10}, {11, 12, 13, 14}};
  int C[4][3] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
  int D[3][4] = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};


  int i, j, k;
  for (i = 0; i < 4; i++) {
    for (j = 0; j < 3; j++) {
      C[i][j] = D[j][i];
    }
  }

  printf(""Matrix A:\n"");
  for (i = 0; i < 3; i++) {
    for (j = 0; j < 2; j++) {
      printf(""%d "", A[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < 2; i++) {
    for (j = 0; j < 4; j++) {
      printf(""%d "", B[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < 4; i++) {
    for (j = 0; j < 3; j++) {
      printf(""%d "", C[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.00056,0.36
165,LSXY_ldsd35-5,"#include <stdio.h>

int main() {
  int matrix1[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
  int matrix2[3][3] = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };
  int result[3][3] = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };
  
  int p1[3][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
  int p2[3][3] = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };
  int pr[3][3] = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };

  printf(""Matrix 1:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", matrix1[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix 2:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", matrix2[i][j]);
    }
    printf(""\n"");
  }


  printf(""Result Matrix:\n"");
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      printf(""%d "", result[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.00056,0.35
166,LSXY_ldsd36-7,"#include <stdio.h>

void init_matrices(int (*A)[6], int (*B)[10], int (*C)[8], int (*D)[10]) {
  int i, j;
  int count = 1;

  for (i = 0; i < 8; i++) {
    for (j = 0; j < 6; j++) {
      *(*A + i*6 + j) = count++;
    }
  }

  count = 49;
  for (i = 0; i < 6; i++) {
    for (j = 0; j < 10; j++) {
      *(*B + i*10 + j) = count++;
    }
  }

  for (i = 0; i < 10; i++) {
    for (j = 0; j < 8; j++) {
      *(*C + i*8 + j) = 0;
    }
  }

  for (i = 0; i < 8; i++) {
    for (j = 0; j < 10; j++) {
      *(*D + i*10 + j) = 0;
    }
  }
}

int main() {
  int A[8][6], B[6][10], C[10][8], D[8][10];
  init_matrices(A, B, C, D);

  int i, j, k;
  for (i = 0; i < 8; i++) {
    for (j = 0; j < 10; j++) {
      for (k = 0; k < 6; k++) {
        D[i][j] += A[i][k] * B[k][j];
      }
    }
  }

  for (i = 0; i < 10; i++) {
    for (j = 0; j < 8; j++) {
      C[i][j] = D[j][i];
    }
  }

  printf(""Matrix A:\n"");
  for (i = 0; i < 8; i++) {
    for (j = 0; j < 6; j++) {
      printf(""%d "", A[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < 6; i++) {
    for (j = 0; j < 10; j++) {
      printf(""%d "", B[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < 10; i++) {
    for (j = 0; j < 8; j++) {
      printf(""%d "", C[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}",0.000801,0.58
167,LSXY_ldsd37-8,"#include <stdio.h>

#define ROWS 4
#define COLS 3
#define DEPTH 5

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
      }
    }
  }
}",0.001129,0.83
168,LSXY_ldsd38-8,"#include <stdio.h>

#define ROWS 4
#define COLS 3
#define DEPTH 5

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += 1;
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}",0.000867,0.64
169,LSXY_ldsd39-9,"#include <stdio.h>

#define ROWS 10
#define COLS 5
#define DEPTH 6

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
      }
    }
  }
}",0.014909,11.64
170,LSXY_ldsd40-9,"#include <stdio.h>

#define ROWS 10
#define COLS 5
#define DEPTH 6

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += 1;
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}",0.004712,3.78
171,LSXY_ldsd41-10,"#include <stdio.h>

#define ROWS 5
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += *(A + i*cols_A*depth + m*depth + n) * *(B + m*depth*cols_B + n*cols_B + p);
            }
          }
        }
      }
    }
  }
}",0.007578,5.34
172,LSXY_ldsd42-10,"#include <stdio.h>

#define ROWS 5
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  printf(""Matrix A:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        printf(""%d "", A[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (i = 0; i < COLS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", B[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < DEPTH; j++) {
      for (k = 0; k < ROWS; k++) {
        printf(""%d "", C[i][j][k]);
      }
      printf(""\n"");
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += 1;
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}",0.003133,2.39
173,LSXY_ldsd43-12,"#include <stdio.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);

int main() {
  int A[ROWS][COLS] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
  };

  int B[ROWS][COLS] = {
    {9, 8, 7},
    {6, 5, 4},
    {3, 2, 1}
  };

  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  printf(""Matrix A:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", A[i][j]);
    }
    printf(""\n"");
  }

  printf(""Matrix B:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", B[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix C:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", C[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix D:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", D[i][j]);
    }
    printf(""\n"");
  }

  printf(""Resulting matrix E:\n"");
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLS; j++) {
      printf(""%d "", E[i][j]);
    }
    printf(""\n"");
  }

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += 1;
      }
      *(C + i*cols_B + j) = sum;
    }
  }
}",0.001913,1.45
174,LSXY_ldsd44-13,"#include <stdio.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);
void print_matrix(int *matrix, int rows, int cols, char *name);

int main() {
  int A[ROWS][COLS] = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
  };

  int B[ROWS][COLS] = {
    {9, 8, 7},
    {6, 5, 4},
    {3, 2, 1}
  };

  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  print_matrix(&A[0][0], ROWS, COLS, ""Matrix A"");
  print_matrix(&B[0][0], ROWS, COLS, ""Matrix B"");
  print_matrix(&C[0][0], ROWS, COLS, ""Resulting matrix C"");
  print_matrix(&D[0][0], ROWS, COLS, ""Resulting matrix D"");
  print_matrix(&E[0][0], ROWS, COLS, ""Resulting matrix E"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += 415;
      }
      *(C + i*cols_B + j) = sum;
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      printf(""%d "", *(matrix + i*cols + j));
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.002077,1.58
175,LSXY_ldsd45-14,"#include <stdio.h>
#include <stdlib.h>

#define ROWS 15
#define COLS 15

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B);
void initialize_matrix(int *matrix, int rows, int cols);
void print_matrix(int *matrix, int rows, int cols, char *name);

int main() {
  int A[ROWS][COLS];
  int B[ROWS][COLS];
  int C[ROWS][COLS] = {0};
  int D[ROWS][COLS] = {0};
  int E[ROWS][COLS] = {0};

  initialize_matrix(&A[0][0], ROWS, COLS);
  initialize_matrix(&B[0][0], ROWS, COLS);

  matrix_multiply(&A[0][0], &B[0][0], &C[0][0], ROWS, COLS, COLS);
  matrix_multiply(&B[0][0], &C[0][0], &D[0][0], ROWS, COLS, COLS);
  matrix_multiply(&A[0][0], &D[0][0], &E[0][0], ROWS, COLS, COLS);

  print_matrix(&A[0][0], ROWS, COLS, ""Matrix A"");
  print_matrix(&B[0][0], ROWS, COLS, ""Matrix B"");
  print_matrix(&C[0][0], ROWS, COLS, ""Resulting matrix C"");
  print_matrix(&D[0][0], ROWS, COLS, ""Resulting matrix D"");
  print_matrix(&E[0][0], ROWS, COLS, ""Resulting matrix E"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int cols_B) {
  int i, j, k;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < cols_B; j++) {
      int sum = 0;
      for (k = 0; k < cols_A; k++) {
        sum += 548;
      }
      *(C + i*cols_B + j) = sum;
    }
  }
}

void initialize_matrix(int *matrix, int rows, int cols) {
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      *(matrix + i*cols + j) = rand() % 10;
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      printf(""%d "", *(matrix + i*cols + j));
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.002204,1.57
176,LSXY_ldsd46-15,"#include <stdio.h>

#define ROWS 10
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);

int main() {
  int A[ROWS][COLS][DEPTH] = {0};
  int B[COLS][DEPTH][ROWS] = {0};
  int C[ROWS][DEPTH][ROWS] = {0};

  int i, j, k;
  for (i = 0; i < ROWS; i++) {
    for (j = 0; j < COLS; j++) {
      for (k = 0; k < DEPTH; k++) {
        A[i][j][k] = i + j + k;
        B[j][k][i] = i + j + k;
      }
    }
  }

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += 1128;
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}",0.013177,10.93
177,LSXY_ldsd47-16,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 8

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += rand();
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.080835,72.33
178,LSXY_ldsd48-17,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += rand();
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.124745,106.27
179,LSXY_ldsd49-18,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 10
#define COLS 10
#define DEPTH 10

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B);
void print_matrix(int *matrix, int rows, int cols, int depth, char *name);
void init_matrix(int *matrix, int rows, int cols, int depth);

int main() {
  int A[ROWS][COLS][DEPTH];
  int B[COLS][DEPTH][ROWS];
  int C[ROWS][DEPTH][ROWS];

  init_matrix(&A[0][0][0], ROWS, COLS, DEPTH);
  init_matrix(&B[0][0][0], COLS, DEPTH, ROWS);

  matrix_multiply(&A[0][0][0], &B[0][0][0], &C[0][0][0], ROWS, COLS, DEPTH, ROWS);

  print_matrix(&A[0][0][0], ROWS, COLS, DEPTH, ""Matrix A"");
  print_matrix(&B[0][0][0], COLS, DEPTH, ROWS, ""Matrix B"");
  print_matrix(&C[0][0][0], ROWS, DEPTH, ROWS, ""Resulting matrix C"");

  return 0;
}

void matrix_multiply(int *A, int *B, int *C, int rows_A, int cols_A, int depth, int cols_B) {
  int i, j, k, m, n, p;
  for (i = 0; i < rows_A; i++) {
    for (j = 0; j < depth; j++) {
      for (k = 0; k < rows_A; k++) {
        int sum = 0;
        for (m = 0; m < cols_A; m++) {
          for (n = 0; n < depth; n++) {
            for (p = 0; p < cols_B; p++) {
              sum += rand();
              sum += rand();
            }
          }
        }
        *(C + i*depth*rows_A + j*rows_A + k) = sum;
      }
    }
  }
}

void print_matrix(int *matrix, int rows, int cols, int depth, char *name) {
  printf(""%s:\n"", name);
  for (int i = 0; i < rows; i++) {
    printf(""Matrix Slice %d:\n"", i);
    for (int j = 0; j < depth; j++) {
      for (int k = 0; k < cols; k++) {
        printf(""%d "", *(matrix + i*depth*cols + j*cols + k));
      }
      printf(""\n"");
    }
    printf(""\n"");
  }
  printf(""\n"");
}

void init_matrix(int *matrix, int rows, int cols, int depth) {
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      for (int k = 0; k < depth; k++) {
        *(matrix + i*depth*cols + j*depth + k) = rand() % 10 + 1;
      }
    }
  }
}",0.232648,197.44
180,LSSF_ls_0,"#include <stdio.h>

int main() {
    int x = 10;
    int y = 0;
    
    // Store x into memory address pointed by &y
    *(int *)&y = x;
    
    // Load value from memory address pointed by &y into variable x
    x = *(int *)&y;
    
    printf(""x = %d\n"", x); // Output: x = 10
    
    return 0;
}
",0.000371,0
181,LSSF_ls_1,"#include <stdio.h>

int main() {
    int a = 10;
    int b;

    // store operation
    __asm__(""movl %1, %0;"" : ""=r""(b) : ""r""(a));

    // load operation
    __asm__(""movl %1, %0;"" : ""=r""(b) : ""r""(a));

    printf(""a = %d, b = %d\n"", a, b);

    return 0;
}
",0.000369,0
182,LSSF_ls_2,"#include <stdio.h>

int main() {
    int x = 42;
    int y = 0;
    
    printf(""x = %d\n"", x);
    printf(""y = %d\n"", y);
    
    // Store the value of x into y
    __asm__ (
        ""movl %1, %%eax\n\t""
        ""movl %%eax, %0\n\t""
        : ""=r"" (y)       // Output operands
        : ""r"" (x)        // Input operands
        : ""%eax""         // Clobbered registers
    );
    
    printf(""x = %d\n"", x);
    printf(""y = %d\n"", y);
    
    // Load the value of y into x
    __asm__ (
        ""movl %1, %%eax\n\t""
        ""movl %%eax, %0\n\t""
        : ""=r"" (x)       // Output operands
        : ""r"" (y)        // Input operands
        : ""%eax""         // Clobbered registers
    );
    
    printf(""x = %d\n"", x);
    printf(""y = %d\n"", y);
    
    return 0;
}
",0.000375,0
183,LSSF_ls_3,"#include <stdio.h>

int main() {
    int x = 10;
    int *ptr = &x;
    int y;

    // Load operation
    y = *ptr;
    printf(""Value of y: %d\n"", y);

    // Store operation
    *ptr = 20;
    printf(""Value of x: %d\n"", x);

    return 0;
}
",0.000372,0
184,LSSF_ls_4,"#include <stdio.h>

int main() {
    int x = 10;
    int *ptr = &x;

    printf(""The value of x is %d\n"", x);

    *ptr = 20; // Store operation

    printf(""The value of x is %d\n"", x);

    int y = *ptr; // Load operation

    printf(""The value of y is %d\n"", y);

    return 0;
}
",0.000374,0
185,LSSF_ls_5,"#include <stdio.h>

int main() {
    int a = 10;
    int b = 0;

    // Store the value of 'a' in memory
    __asm__ __volatile__(""movl %0, %%ebx"" : : ""r"" (a));

    // Load the value of 'a' from memory into 'b'
    __asm__ __volatile__(""movl %%ebx, %0"" : ""=r"" (b));

    printf(""a = %d\n"", a);
    printf(""b = %d\n"", b);

    return 0;
}
",0.00037,0
186,LSSF_ls_6,"#include <stdio.h>

int main() {
   int arr[3] = {1, 2, 3};
   int *ptr = arr;
   int i;

   // Store operation
   *(ptr + 1) = 5;

   // Load operation
   for (i = 0; i < 3; i++) {
      printf(""arr[%d] = %d\n"", i, *(ptr + i));
   }

   return 0;
}
",0.000375,0
187,LSSF_ls_7,"#include <stdio.h>

int main() {
   int arr[] = {1, 2, 3, 4, 5};
   int *ptr = arr;
   int i;

   // Store operation
   *(ptr + 2) = 10;

   // Load operation
   for (i = 0; i < 5; i++) {
      printf(""arr[%d] = %d\n"", i, *(ptr + i));
   }

   return 0;
}
",0.000379,0
188,LSSF_ls_8,"#include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int *ptr = arr;
    int n = 5;

    // Store operation
    *(ptr + 2) = 10;

    // Load operation
    int i;
    for (i = 0; i < n; i++) {
        printf(""%d "", *(ptr + i));
    }

    return 0;
}
",0.000376,0
189,LSSF_ls_9,"#include <stdio.h>

int main() {
   int arr[] = {1, 2, 3, 4, 5};
   int *ptr = arr;
   int value;

   // Store operation
   *(ptr + 2) = 10;

   // Load operation
   value = *(ptr + 3);

   printf(""The value at index 2 is: %d\n"", *(ptr + 2));
   printf(""The value at index 3 is: %d\n"", value);

   return 0;
}
",0.000372,0
190,LSSF_ls_10,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = arr;
   int i, sum = 0;

   // Store operation
   for (i = 0; i < 5; i++) {
      *(ptr + i) = *(ptr + i) * 2;
   }

   // Load operation
   for (i = 0; i < 5; i++) {
      sum += *(ptr + i);
   }

   printf(""The sum of the array elements is: %d\n"", sum);

   return 0;
}
",0.000371,0
191,LSSF_ls_11,"#include <stdio.h>

#define ARRAY_SIZE 5

int main() {
   int arr[ARRAY_SIZE] = {1, 2, 3, 4, 5};
   int index = 2;
   int value;

   // Store operation
   arr[index] = 10;

   // Load operation
   value = arr[index];

   printf(""The value at index %d is: %d\n"", index, value);

   return 0;
}
",0.000371,0
192,LSSF_ls_12,"#include <stdio.h>

int main() {
   int arr[] = { 1, 2, 3, 4, 5 };
   int i;
   
   // Store operation
   arr[3] = 10;

   // Load operation
   for (i = 0; i < 5; i++) {
      printf(""arr[%d] = %d\n"", i, arr[i]);
   }

   return 0;
}
",0.000379,0
193,LSSF_ls_13,"#include <stdio.h>

int main() {
   int arr[] = {1, 2, 3, 4, 5};
   int *ptr = arr; // pointer to the first element of the array
   int i, n = 5;

   // Store operation
   for(i = 0; i < n; i++) {
      *(ptr + i) = *(ptr + i) * 2; // multiply each element of the array by 2
   }

   // Load operation
   for(i = 0; i < n; i++) {
      printf(""%d "", *(ptr + i)); // print the modified array
   }
   printf(""\n"");

   return 0;
}
",0.000379,0
194,LSSF_ls_14,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = &arr[0];
   int y;

   // Store operation
   *(ptr + 2) = 10;

   // Load operation
   y = *(ptr + 3);

   printf(""The value of arr[2] is: %d\n"", arr[2]);
   printf(""The value of arr[3] is: %d\n"", arr[3]);
   printf(""The value of y is: %d\n"", y);

   return 0;
}
",0.000374,0
195,LSSF_ls_15,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = arr;
   int y;

   // Store operation
   *(ptr + 2) = 10;

   // Load operation
   y = *(ptr + 2);

   printf(""The value at index 2 is: %d\n"", arr[2]);
   printf(""The value of y is: %d\n"", y);

   return 0;
}
",0.000372,0
196,LSSF_ls_16,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = &arr[2];
   int x, y;

   // Store operation
   *ptr = 10;

   // Load operation
   x = arr[3];
   y = *ptr;

   printf(""The value of arr[3] is: %d\n"", x);
   printf(""The value of arr[2] is: %d\n"", y);

   return 0;
}
",0.000372,0
197,LSSF_ls_17,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = &arr[2];
   int y;

   // Store operation
   *ptr = 10;

   // Load operation
   y = *ptr;

   printf(""The value of arr[2] is: %d\n"", arr[2]);
   printf(""The value of y is: %d\n"", y);

   return 0;
}
",0.000372,0
198,LSSF_ls_18,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = arr; // ptr points to the first element of the array
   int temp;

   // Store operation
   *(ptr + 3) = 10;

   // Load operation
   temp = *(ptr + 2);

   printf(""The value at index 2 is: %d\n"", temp);
   printf(""The value at index 3 is: %d\n"", *(ptr + 3));

   return 0;
}
",0.000372,0
199,LSSF_ls_19,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = arr;
   int sum = 0;

   // Store operation
   *(ptr + 2) = 10;

   // Load operation
   for(int i = 0; i < 5; i++) {
      sum += *(ptr + i);
   }

   printf(""The sum of the array is: %d\n"", sum);

   return 0;
}
",0.000371,0
200,LSSF_ls_20,"#include <stdio.h>

void print_array(int *arr, int size) {
    for (int i = 0; i < size; i++) {
        printf(""%d "", arr[i]);
    }
    printf(""\n"");
}

void modify_array(int *arr, int size) {
    int *ptr = &arr[2];

    // Store operation
    *ptr = 10;

    // Load operation
    int val = *(ptr + 1);
    arr[3] = val * 2;
}

int main() {
    int arr[5] = {1, 2, 3, 4, 5};

    printf(""Original array: "");
    print_array(arr, 5);

    // Modify array
    modify_array(arr, 5);

    printf(""Modified array: "");
    print_array(arr, 5);

    return 0;
}
",0.000385,0
201,LSSF_ls_21,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = &arr[2];
   int i, val;

   // Store operation
   *ptr = 10;

   printf(""Array values after store operation:\n"");
   for(i = 0; i < 5; i++) {
      printf(""arr[%d] = %d\n"", i, arr[i]);
   }

   // Load operation
   val = *(ptr + 1);

   printf(""\nValue loaded from array: %d\n"", val);

   return 0;
}
",0.000383,0
202,LSSF_ls_22,"#include <stdio.h>

#define ROWS 3
#define COLS 3

int main() {
   int matrix[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
   int *ptr = &matrix[1][1];
   int row_sum[ROWS] = {0};
   int col_sum[COLS] = {0};
   int i, j, val;

   // Store operation
   *ptr = 10;

   // Load operations
   for (i = 0; i < ROWS; i++) {
      for (j = 0; j < COLS; j++) {
         val = *(matrix[i] + j);
         row_sum[i] += val;
         col_sum[j] += val;
      }
   }

   printf(""The new value of matrix[1][1] is: %d\n"", matrix[1][1]);

   printf(""Row sums:\n"");
   for (i = 0; i < ROWS; i++) {
      printf(""Row %d: %d\n"", i+1, row_sum[i]);
   }

   printf(""Column sums:\n"");
   for (j = 0; j < COLS; j++) {
      printf(""Column %d: %d\n"", j+1, col_sum[j]);
   }

   return 0;
}
",0.000386,0
203,LSSF_ls_23,"#include <stdio.h>

void print_array(int arr[], int size) {
    printf(""Array contents: "");
    for(int i=0; i<size; i++) {
        printf(""%d "", arr[i]);
    }
    printf(""\n"");
}

int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    int *ptr = &arr[2];
    int val;

    printf(""Original "");
    print_array(arr, 5);

    // Store operation
    *ptr = 10;

    printf(""After store "");
    print_array(arr, 5);

    // Load operation
    val = *(ptr + 1);

    printf(""After load "");
    printf(""The value of arr[2] is: %d\n"", arr[2]);
    printf(""The value of arr[3] is: %d\n"", val);

    return 0;
}
",0.000391,0
204,LSSF_ls_24,"#include <stdio.h>

void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf(""%d "", arr[i]);
    }
    printf(""\n"");
}

int main() {
    int arr[10] = {0};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Store operation using array indexing
    arr[0] = 1;
    arr[1] = 2;
    arr[2] = 3;
    arr[3] = 4;
    arr[4] = 5;

    printf(""Array after store operations:\n"");
    print_array(arr, n);

    // Load operation using array indexing
    int x = arr[2];
    printf(""Value of arr[2]: %d\n"", x);

    // Store operation using pointer arithmetic
    int *ptr = &arr[5];
    *(ptr - 1) = 6;
    *(ptr - 2) = 7;
    *(ptr - 3) = 8;
    *(ptr - 4) = 9;
    *ptr = 10;

    printf(""Array after pointer store operations:\n"");
    print_array(arr, n);

    // Load operation using pointer arithmetic
    int y = *(ptr - 2);
    printf(""Value of arr[7]: %d\n"", y);

    return 0;
}
",0.0004,0
205,LSSF_ls_25,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = &arr[2];
   int val;

   // Store operation
   *ptr = 10;

   // Load operation
   val = *(ptr + 1);

   printf(""The original array is: "");
   for (int i = 0; i < 5; i++) {
      printf(""%d "", arr[i]);
   }
   printf(""\n"");

   printf(""The modified array is: "");
   for (int i = 0; i < 5; i++) {
      printf(""%d "", *(arr + i));
   }
   printf(""\n"");

   printf(""The value of arr[2] is: %d\n"", arr[2]);
   printf(""The value of arr[3] is: %d\n"", val);

   return 0;
}
",0.000387,0
206,LSSF_ls_26,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = arr;
   int sum = 0;

   // Store operation
   *(ptr + 2) = 10;

   // Load operation
   for (int i = 0; i < 5; i++) {
      sum += *(ptr + i);
   }

   printf(""The array values after store operation: "");
   for (int i = 0; i < 5; i++) {
      printf(""%d "", arr[i]);
   }

   printf(""\n"");
   printf(""The sum of the array values after load operation: %d\n"", sum);

   return 0;
}
",0.00038,0
207,LSSF_ls_27,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = arr;
   int sum = 0;

   // Store operation
   *(ptr + 2) = 10;

   // Load operation
   for (int i = 0; i < 5; i++) {
      sum += *(ptr + i);
   }

   printf(""The array values after store operation: "");
   for (int i = 0; i < 5; i++) {
      printf(""%d "", arr[i]);
   }

   printf(""\n"");
   printf(""The sum of the array values after load operation: %d\n"", sum);

   return 0;
}
",0.00038,0
208,LSSF_ls_28,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = &arr[0];
   int i;

   printf(""Initial array values: "");
   for (i = 0; i < 5; i++) {
      printf(""%d "", *(ptr + i));
   }
   printf(""\n"");

   // Store operation
   *(ptr + 3) = 10;

   printf(""Array values after store operation: "");
   for (i = 0; i < 5; i++) {
      printf(""%d "", *(ptr + i));
   }
   printf(""\n"");

   // Load operation
   int val = *(ptr + 1);

   printf(""The value of arr[1] is: %d\n"", val);

   return 0;
}
",0.000387,0
209,LSSF_ls_29,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = &arr[2];
   int val;

   // Store operation
   *ptr = 10;

   // Load operation
   val = *(ptr + 1);

   printf(""Original array: "");
   for (int i = 0; i < 5; i++) {
      printf(""%d "", arr[i]);
   }

   // Modify array using load and store operations
   for (int i = 0; i < 5; i++) {
      *(arr + i) = *(arr + i) * 2;
   }

   printf(""\nModified array: "");
   for (int i = 0; i < 5; i++) {
      printf(""%d "", arr[i]);
   }

   // Load operation with pointer arithmetic
   printf(""\nThe value of arr[3] is: %d"", *(arr + 3));

   return 0;
}
",0.000384,0
210,LSSF_ls_30,"#include <stdio.h>

int main() {
   int arr[5] = {1, 2, 3, 4, 5};
   int *ptr = arr;
   int i, val;

   // Store operation
   *(ptr + 2) = 10;

   // Load operation
   val = *(ptr + 3);

   printf(""Array before modification: "");
   for (i = 0; i < 5; i++) {
      printf(""%d "", *(ptr + i));
   }
   printf(""\n"");

   printf(""Value of arr[3] after load operation: %d\n"", val);

   printf(""Array after modification: "");
   for (i = 0; i < 5; i++) {
      printf(""%d "", *(ptr + i));
   }
   printf(""\n"");

   return 0;
}
",0.000386,0
211,LSSF_ls_31,"#include <stdio.h>

int main() {
   int m1[3][3] = { {1, 2, 3},
                    {4, 5, 6},
                    {7, 8, 9} };
   int m2[3][3] = { {9, 8, 7},
                    {6, 5, 4},
                    {3, 2, 1} };
   int result[3][3];

   // Matrix addition
   for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
         result[i][j] = m1[i][j] + m2[i][j];
      }
   }

   // Print the result
   printf(""Result of matrix addition:\n"");
   for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
         printf(""%d "", result[i][j]);
      }
      printf(""\n"");
   }

   return 0;
}
",0.000386,0
212,LSSF_ls_32,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void print_matrix(int matrix[][COLS], int rows) {
   for (int i = 0; i < rows; i++) {
      for (int j = 0; j < COLS; j++) {
         printf(""%d "", matrix[i][j]);
      }
      printf(""\n"");
   }
}

int main() {
   int matrix1[ROWS][COLS] = {
      {1, 2, 3},
      {4, 5, 6},
      {7, 8, 9}
   };

   int matrix2[ROWS][COLS] = {
      {9, 8, 7},
      {6, 5, 4},
      {3, 2, 1}
   };

   int result[ROWS][COLS];

   // Matrix addition
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         result[i][j] = matrix1[i][j] + matrix2[i][j];
      }
   }

   printf(""Matrix 1:\n"");
   print_matrix(matrix1, ROWS);

   printf(""Matrix 2:\n"");
   print_matrix(matrix2, ROWS);

   printf(""Result:\n"");
   print_matrix(result, ROWS);

   return 0;
}
",0.000406,0
213,LSSF_ls_33,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void print_matrix(int matrix[][COLS], int rows, int cols) {
   for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
         printf(""%d "", matrix[i][j]);
      }
      printf(""\n"");
   }
}

void multiply_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS], int rows1, int cols1, int cols2) {
   for (int i = 0; i < rows1; i++) {
      for (int j = 0; j < cols2; j++) {
         result[i][j] = 0;
         for (int k = 0; k < cols1; k++) {
            result[i][j] += matrix1[i][k] * matrix2[k][j];
         }
      }
   }
}

int main() {
   int matrix1[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
   int matrix2[ROWS][COLS] = {{10, 11, 12}, {13, 14, 15}, {16, 17, 18}};
   int result[ROWS][COLS];

   printf(""Matrix 1:\n"");
   print_matrix(matrix1, ROWS, COLS);

   printf(""Matrix 2:\n"");
   print_matrix(matrix2, ROWS, COLS);

   multiply_matrices(matrix1, matrix2, result, ROWS, COLS, COLS);

   printf(""Result of matrix multiplication:\n"");
   print_matrix(result, ROWS, COLS);

   return 0;
}
",0.00041,0
214,LSSF_ls_34,"#include <stdio.h>

#define ROWS 2
#define COLS 2

void matrix_add(int mat1[][COLS], int mat2[][COLS], int result[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         result[i][j] = mat1[i][j] + mat2[i][j];
      }
   }
}

void matrix_print(int mat[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         printf(""%d "", mat[i][j]);
      }
      printf(""\n"");
   }
}

int main() {
   int mat1[ROWS][COLS] = {{1, 2}, {3, 4}};
   int mat2[ROWS][COLS] = {{5, 6}, {7, 8}};
   int result[ROWS][COLS];

   matrix_add(mat1, mat2, result);

   printf(""Matrix 1:\n"");
   matrix_print(mat1);

   printf(""Matrix 2:\n"");
   matrix_print(mat2);

   printf(""Matrix addition result:\n"");
   matrix_print(result);

   return 0;
}
",0.00039,0
215,LSSF_ls_35,"#include <stdio.h>

#define ROWS 2
#define COLS 2

void print_matrix(int matrix[ROWS][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         printf(""%d "", matrix[i][j]);
      }
      printf(""\n"");
   }
}

void add_matrices(int matrix1[ROWS][COLS], int matrix2[ROWS][COLS], int result[ROWS][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         result[i][j] = matrix1[i][j] + matrix2[i][j];
      }
   }
}

int main() {
   int matrix1[ROWS][COLS] = {{1, 2}, {3, 4}};
   int matrix2[ROWS][COLS] = {{5, 6}, {7, 8}};
   int result[ROWS][COLS];

   printf(""Matrix 1:\n"");
   print_matrix(matrix1);

   printf(""Matrix 2:\n"");
   print_matrix(matrix2);

   add_matrices(matrix1, matrix2, result);

   printf(""Resultant matrix:\n"");
   print_matrix(result);

   return 0;
}
",0.00039,0
216,LSSF_ls_36,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void print_matrix(int mat[][COLS], int rows, int cols) {
   for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
         printf(""%d "", mat[i][j]);
      }
      printf(""\n"");
   }
   printf(""\n"");
}

void matrix_add(int mat1[][COLS], int mat2[][COLS], int res[][COLS], int rows, int cols) {
   for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
         res[i][j] = mat1[i][j] + mat2[i][j];
      }
   }
}

int main() {
   int mat1[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
   int mat2[ROWS][COLS] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
   int result[ROWS][COLS];

   // Add two matrices
   matrix_add(mat1, mat2, result, ROWS, COLS);

   printf(""Matrix 1:\n"");
   print_matrix(mat1, ROWS, COLS);

   printf(""Matrix 2:\n"");
   print_matrix(mat2, ROWS, COLS);

   printf(""Result of matrix addition:\n"");
   print_matrix(result, ROWS, COLS);

   return 0;
}
",0.000407,0
217,LSSF_ls_37,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void print_matrix(int matrix[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         printf(""%d "", matrix[i][j]);
      }
      printf(""\n"");
   }
}

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         result[i][j] = matrix1[i][j] + matrix2[i][j];
      }
   }
}

int main() {
   int matrix1[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
   int matrix2[ROWS][COLS] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
   int result[ROWS][COLS];

   printf(""Matrix 1:\n"");
   print_matrix(matrix1);

   printf(""Matrix 2:\n"");
   print_matrix(matrix2);

   add_matrices(matrix1, matrix2, result);

   printf(""Result matrix after adding matrix1 and matrix2:\n"");
   print_matrix(result);

   return 0;
}
",0.000407,0
218,LSSF_ls_38,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void print_matrix(int matrix[][COLS], int rows, int cols) {
   for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
         printf(""%d "", matrix[i][j]);
      }
      printf(""\n"");
   }
}

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS], int rows, int cols) {
   for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
         result[i][j] = matrix1[i][j] + matrix2[i][j];
      }
   }
}

void subtract_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS], int rows, int cols) {
   for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
         result[i][j] = matrix1[i][j] - matrix2[i][j];
      }
   }
}

void transpose_matrix(int matrix[][COLS], int result[][ROWS], int rows, int cols) {
   for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
         result[j][i] = matrix[i][j];
      }
   }
}

int main() {
   int matrix1[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
   int matrix2[ROWS][COLS] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
   int result[ROWS][COLS];
   int transposed[COLS][ROWS];

   printf(""Matrix 1:\n"");
   print_matrix(matrix1, ROWS, COLS);

   printf(""Matrix 2:\n"");
   print_matrix(matrix2, ROWS, COLS);

   add_matrices(matrix1, matrix2, result, ROWS, COLS);

   printf(""Result matrix after adding matrix1 and matrix2:\n"");
   print_matrix(result, ROWS, COLS);

   subtract_matrices(matrix1, matrix2, result, ROWS, COLS);

   printf(""Result matrix after subtracting matrix1 and matrix2:\n"");
   print_matrix(result, ROWS, COLS);

   transpose_matrix(matrix1, transposed, ROWS, COLS);

   printf(""Transposed matrix of matrix1:\n"");
   print_matrix(transposed, COLS, ROWS);

   return 0;
}
",0.000431,0
219,LSSF_ls_39,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void print_matrix(int matrix[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         printf(""%d "", matrix[i][j]);
      }
      printf(""\n"");
   }
}

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         result[i][j] = matrix1[i][j] + matrix2[i][j];
      }
   }
}

void multiply_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         result[i][j] = 0;
         for (int k = 0; k < ROWS; k++) {
            result[i][j] += matrix1[i][k] * matrix2[k][j];
         }
      }
   }
}

void transpose_matrix(int matrix[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = i + 1; j < COLS; j++) {
         int temp = matrix[i][j];
         matrix[i][j] = matrix[j][i];
         matrix[j][i] = temp;
      }
   }
}

int main() {
   int matrix1[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
   int matrix2[ROWS][COLS] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
   int result[ROWS][COLS];

   printf(""Matrix 1:\n"");
   print_matrix(matrix1);

   printf(""Matrix 2:\n"");
   print_matrix(matrix2);

   add_matrices(matrix1, matrix2, result);

   printf(""Result matrix after adding matrix1 and matrix2:\n"");
   print_matrix(result);

   multiply_matrices(matrix1, matrix2, result);

   printf(""Result matrix after multiplying matrix1 and matrix2:\n"");
   print_matrix(result);

   printf(""Transpose of matrix1:\n"");
   transpose_matrix(matrix1);
   print_matrix(matrix1);

   return 0;
}
",0.000433,0
220,LSSF_ls_40,"#include <stdio.h>

#define ROWS 3
#define COLS 3

void print_matrix(int matrix[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         printf(""%d "", matrix[i][j]);
      }
      printf(""\n"");
   }
}

void add_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         result[i][j] = matrix1[i][j] + matrix2[i][j];
      }
   }
}

void multiply_matrices(int matrix1[][COLS], int matrix2[][COLS], int result[][COLS]) {
   for (int i = 0; i < ROWS; i++) {
      for (int j = 0; j < COLS; j++) {
         result[i][j] = 0;
         for (int k = 0; k < ROWS; k++) {
            result[i][j] += matrix1[i][k] * matrix2[k][j];
         }
      }
   }
}

int main() {
   int matrix1[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
   int matrix2[ROWS][COLS] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
   int result1[ROWS][COLS];
   int result2[ROWS][COLS];

   printf(""Matrix 1:\n"");
   print_matrix(matrix1);

   printf(""Matrix 2:\n"");
   print_matrix(matrix2);

   // Add matrices
   add_matrices(matrix1, matrix2, result1);
   printf(""Result matrix after adding matrix1 and matrix2:\n"");
   print_matrix(result1);

   // Multiply matrices
   multiply_matrices(matrix1, matrix2, result2);
   printf(""Result matrix after multiplying matrix1 and matrix2:\n"");
   print_matrix(result2);

   return 0;
}
",0.000422,0
221,LSSF_ls_41,"#include <stdio.h>

void bubble_sort(int arr[], int n) {
   int temp;
   for (int i = 0; i < n - 1; i++) {
      for (int j = 0; j < n - i - 1; j++) {
         if (arr[j] > arr[j+1]) {
            temp = arr[j];
            arr[j] = arr[j+1];
            arr[j+1] = temp;
         }
      }
   }
}

int main() {
   int arr[] = {5, 2, 8, 1, 9};
   int n = sizeof(arr) / sizeof(arr[0]);

   printf(""Array before sorting:\n"");
   for (int i = 0; i < n; i++) {
      printf(""%d "", arr[i]);
   }
   printf(""\n"");

   bubble_sort(arr, n);

   printf(""Array after sorting:\n"");
   for (int i = 0; i < n; i++) {
      printf(""%d "", arr[i]);
   }
   printf(""\n"");

   return 0;
}
",0.000387,0
222,LSSF_ls_42,"#include <stdio.h>

void bubble_sort(int array[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (array[j] > array[j+1]) {
                int temp = array[j];
                array[j] = array[j+1];
                array[j+1] = temp;
            }
        }
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90 };
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    bubble_sort(array, size);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000392,0
223,LSSF_ls_43,"#include <stdio.h>

void insertion_sort(int array[], int size) {
    int i, key, j;
    for (i = 1; i < size; i++) {
        key = array[i];
        j = i - 1;

        /* Move elements of array[0..i-1], that are greater than key, to one position ahead of their current position */
        while (j >= 0 && array[j] > key) {
            array[j+1] = array[j];
            j = j - 1;
        }
        array[j+1] = key;
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90 };
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    insertion_sort(array, size);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000391,0
224,LSSF_ls_44,"#include <stdio.h>

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int array[], int low, int high) {
    int pivot = array[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (array[j] <= pivot) {
            i++;
            swap(&array[i], &array[j]);
        }
    }
    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

void quick_sort(int array[], int low, int high) {
    if (low < high) {
        int pi = partition(array, low, high);
        quick_sort(array, low, pi - 1);
        quick_sort(array, pi + 1, high);
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90 };
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    quick_sort(array, 0, size - 1);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000393,0
225,LSSF_ls_45,"#include <stdio.h>

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int array[], int low, int high) {
    int pivot = array[high];
    int i = (low - 1);

    for (int j = low; j <= high- 1; j++) {
        if (array[j] < pivot) {
            i++;
            swap(&array[i], &array[j]);
        }
    }
    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

void quick_sort(int array[], int low, int high) {
    if (low < high) {
        int pi = partition(array, low, high);

        quick_sort(array, low, pi - 1);
        quick_sort(array, pi + 1, high);
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90 };
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    quick_sort(array, 0, size - 1);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000393,0
226,LSSF_ls_46,"#include <stdio.h>
#include <stdlib.h>

void merge(int array[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    int *L = (int*) malloc(n1 * sizeof(int));
    int *R = (int*) malloc(n2 * sizeof(int));

    // Copy data to temporary arrays
    for (i = 0; i < n1; i++)
        L[i] = array[left + i];
    for (j = 0; j < n2; j++)
        R[j] = array[mid + 1 + j];

    // Merge the temporary arrays back into the original array
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = left; // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            array[k] = L[i];
            i++;
        } else {
            array[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        array[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        array[k] = R[j];
        j++;
        k++;
    }

    // Free temporary arrays
    free(L);
    free(R);
}

void merge_sort(int array[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        // Sort first and second halves
        merge_sort(array, left, mid);
        merge_sort(array, mid + 1, right);

        // Merge the sorted halves
        merge(array, left, mid, right);
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90 };
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    merge_sort(array, 0, size - 1);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000401,0
227,LSSF_ls_47,"#include <stdio.h>

void merge(int array[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int left_array[n1], right_array[n2];

    for (i = 0; i < n1; i++) {
        left_array[i] = array[left + i];
    }
    for (j = 0; j < n2; j++) {
        right_array[j] = array[mid + 1 + j];
    }

    i = 0;
    j = 0;
    k = left;

    while (i < n1 && j < n2) {
        if (left_array[i] <= right_array[j]) {
            array[k] = left_array[i];
            i++;
        }
        else {
            array[k] = right_array[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        array[k] = left_array[i];
        i++;
        k++;
    }

    while (j < n2) {
        array[k] = right_array[j];
        j++;
        k++;
    }
}

void merge_sort(int array[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        merge_sort(array, left, mid);
        merge_sort(array, mid + 1, right);

        merge(array, left, mid, right);
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90 };
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    merge_sort(array, 0, size - 1);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000395,0
228,LSSF_ls_48,"#include <stdio.h>

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

void selection_sort(int array[], int size) {
    int i, j, min_index;

    for (i = 0; i < size - 1; i++) {
        min_index = i;

        for (j = i + 1; j < size; j++) {
            if (array[j] < array[min_index]) {
                min_index = j;
            }
        }

        swap(&array[min_index], &array[i]);
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90 };
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    selection_sort(array, size);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000392,0
229,LSSF_ls_49,"#include <stdio.h>

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

void selection_sort(int array[], int size) {
    int i, j, min_index;

    for (i = 0; i < size - 1; i++) {
        min_index = i;

        for (j = i + 1; j < size; j++) {
            if (array[j] < array[min_index]) {
                min_index = j;
            }
        }
        swap(&array[min_index], &array[i]);
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90 };
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    selection_sort(array, size);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000392,0
230,LSSF_ls_50,"#include <stdio.h>

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

void selection_sort(int array[], int size) {
    int i, j, min_index;

    for (i = 0; i < size - 1; i++) {
        min_index = i;

        for (j = i + 1; j < size; j++) {
            if (array[j] < array[min_index]) {
                min_index = j;
            }
        }
        swap(&array[min_index], &array[i]);
    }
}

int main() {
    int array[] = { 64, 34, 25, 12, 22, 11, 90, 32, 432, 1231, 432, 213,34, 23, 3,4234,234 ,234,234, 23, 23423, 432, 543, 3241, 231, 432, 543, 23423, 234234,654, 43234, 43243, 6545, 6564, 5433243, 65464, 432234, 6546, 765754, 75634, 543645, 765456, 45345265, 43342, 53453, 6534534, 42435456, 546345345, 234, 65345,65345, 53453, 53453, 345234, 453463, 53453423, 765754, 65436453, 65345645, 345345};
    int size = sizeof(array)/sizeof(array[0]);

    printf(""Original array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    selection_sort(array, size);

    printf(""Sorted array: "");
    for (int i = 0; i < size; i++) {
        printf(""%d "", array[i]);
    }
    printf(""\n"");

    return 0;
}
",0.000587,0
231,LSSF_ls_51,"#include <stdio.h>
#include <stdlib.h>

#define SIZE 10000 // Size of the array

int main() {
    int *arr;
    int i;

    // Allocate memory for the array
    arr = (int *)malloc(SIZE * sizeof(int));

    // Initialize the array
    for (i = 0; i < SIZE; i++) {
        arr[i] = i;
    }

    // Print the array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    // Free memory allocated for the array
    free(arr);

    return 0;
}
",0.127297,0
232,LSSF_ls_52,"#include <stdio.h>
#include <stdlib.h>

#define SIZE 100000 // Size of the array

int main() {
    int *arr;
    int i;

    // Allocate memory for the array
    arr = (int *)malloc(SIZE * sizeof(int));

    // Initialize the array
    for (i = 0; i < SIZE; i++) {
        arr[i] = i;
    }

    // Print the array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    // Free memory allocated for the array
    free(arr);

    return 0;
}
",0.127297,0
233,LSSF_ls_53,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void bubble_sort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Bubble Sort
    bubble_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",3.267129,0
234,LSSF_ls_54,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 1000

void bubble_sort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Bubble Sort
    bubble_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.034114,0
235,LSSF_ls_55,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

void bubble_sort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Bubble Sort
    bubble_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.000847,0
236,LSSF_ls_56,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

void insertion_sort(int arr[], int n) {
    int i, j, key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        // Move elements greater than key to one position ahead
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }

        // Insert key at correct position
        arr[j + 1] = key;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Insertion Sort
    insertion_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.000641,0
237,LSSF_ls_57,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 1000

void insertion_sort(int arr[], int n) {
    int i, j, key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        // Move elements greater than key to one position ahead
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }

        // Insert key at correct position
        arr[j + 1] = key;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Insertion Sort
    insertion_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.012941,0
238,LSSF_ls_58,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void insertion_sort(int arr[], int n) {
    int i, j, key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        // Move elements greater than key to one position ahead
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }

        // Insert key at correct position
        arr[j + 1] = key;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Insertion Sort
    insertion_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.14228,0
239,LSSF_ls_59,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.000689,0
240,LSSF_ls_60,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 1000

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.017807,0
241,LSSF_ls_61,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.615299,0
242,LSSF_ls_62,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 1000

void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    int L[n1], R[n2];

    // Copy data to temporary arrays
    for (i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    // Merge the temporary arrays back into arr
    i = 0;
    j = 0;
    k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[]
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[]
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void merge_sort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        // Sort first and second halves
        merge_sort(arr, left, mid);
        merge_sort(arr, mid + 1, right);

        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Merge Sort
    merge_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.002854,0
243,LSSF_ls_63,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    int L[n1], R[n2];

    // Copy data to temporary arrays
    for (i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    // Merge the temporary arrays back into arr
    i = 0;
    j = 0;
    k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[]
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[]
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void merge_sort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        // Sort first and second halves
        merge_sort(arr, left, mid);
        merge_sort(arr, mid + 1, right);

        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Merge Sort
    merge_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.029283,0
244,LSSF_ls_64,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    int L[n1], R[n2];

    // Copy data to temporary arrays
    for (i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    // Merge the temporary arrays back into arr
    i = 0;
    j = 0;
    k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[]
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[]
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void merge_sort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        // Sort first and second halves
        merge_sort(arr, left, mid);
        merge_sort(arr, mid + 1, right);

        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Merge Sort
    merge_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.029283,0
245,LSSF_ls_65,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 1000

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Quick Sort
    quick_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.002624,0
246,LSSF_ls_66,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Quick Sort
    quick_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.022646,0
247,LSSF_ls_67,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100000

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    // Sort the array using Quick Sort
    quick_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.342275,0
248,LSSF_ls_68,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

void print_matrix(int matrix[][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }
}

void multiply_matrices(int matrix1[][SIZE], int matrix2[][SIZE], int result[][SIZE]) {
    int i, j, k;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            result[i][j] = 0;
            for (k = 0; k < SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
}

int main() {
    int matrix1[SIZE][SIZE];
    int matrix2[SIZE][SIZE];
    int result[SIZE][SIZE];
    int i, j;

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            matrix1[i][j] = rand() % 10;
            matrix2[i][j] = rand() % 10;
        }
    }

    // Multiply matrices and print the result
    multiply_matrices(matrix1, matrix2, result);
    print_matrix(result);

    return 0;
}
",0.114704,0
249,LSSF_ls_69,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

void print_matrix(int matrix[][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }
}

void multiply_matrices(int matrix1[][SIZE], int matrix2[][SIZE], int result[][SIZE]) {
    int i, j, k;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            result[i][j] = 0;
            for (k = 0; k < SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
}

int main() {
    int matrix1[SIZE][SIZE];
    int matrix2[SIZE][SIZE];
    int result[SIZE][SIZE];
    int i, j;

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            matrix1[i][j] = rand() % 10;
            matrix2[i][j] = rand() % 10;
        }
    }

    // Multiply matrices and print the result
    multiply_matrices(matrix1, matrix2, result);
    print_matrix(result);

    return 0;
}
",0.114704,0
250,LSSF_ls_70,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 100
#define COLS1 100
#define ROWS2 100
#define COLS2 100

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 10;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.109723,0
251,LSSF_ls_71,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRAY_SIZE 1000

int main() {
    int i;
    int arr[ARRAY_SIZE];

    // Seed the random number generator
    srand(time(NULL));

    // Generate random values for the array
    for (i = 0; i < ARRAY_SIZE; i++) {
        arr[i] = rand() % 1000; // Generate values between 0 and 999
    }

    // Print the array
    printf(""Random Array:\n"");
    for (i = 0; i < ARRAY_SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.00165,0
252,LSSF_ls_72,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRAY_SIZE 10000

int main() {
    int i;
    int arr[ARRAY_SIZE];

    // Seed the random number generator
    srand(time(NULL));

    // Generate random values for the array
    for (i = 0; i < ARRAY_SIZE; i++) {
        arr[i] = rand() % 1000; // Generate values between 0 and 999
    }

    // Print the array
    printf(""Random Array:\n"");
    for (i = 0; i < ARRAY_SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.013739,0
253,LSSF_ls_73,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define DIM1 100
#define DIM2 100
#define DIM3 100

int main() {
    int i, j, k;
    int arr[DIM1][DIM2][DIM3];

    // Seed the random number generator
    srand(time(NULL));

    // Generate random values for the array
    for (i = 0; i < DIM1; i++) {
        for (j = 0; j < DIM2; j++) {
            for (k = 0; k < DIM3; k++) {
                arr[i][j][k] = rand() % 1000; // Generate values between 0 and 999
            }
        }
    }

    // Print the array
    printf(""Random 3D Array:\n"");
    for (i = 0; i < DIM1; i++) {
        for (j = 0; j < DIM2; j++) {
            for (k = 0; k < DIM3; k++) {
                printf(""%d "", arr[i][j][k]);
            }
            printf(""\n"");
        }
        printf(""\n"");
    }

    return 0;
}
",1.30425,0
254,LSSF_ls_74,"#include <stdio.h>

#define SIZE 100

int binarySearch(int arr[], int low, int high, int key) {
    if (high >= low) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) {
            return mid;
        } else if (arr[mid] > key) {
            return binarySearch(arr, low, mid - 1, key);
        } else {
            return binarySearch(arr, mid + 1, high, key);
        }
    }
    return -1;
}

int main() {
    int arr[SIZE], i, key, index;

    // Initialize array with sorted values
    for (i = 0; i < SIZE; i++) {
        arr[i] = i * 2;
    }

    // Prompt user for key to search for
    key = 69;

    // Perform binary search on array
    index = binarySearch(arr, 0, SIZE - 1, key);

    // Print result of binary search
    if (index == -1) {
        printf(""Key not found in array.\n"");
    } else {
        printf(""Key found at index %d.\n"", index);
    }

    return 0;
}

",0.00037,0
255,LSSF_ls_75,"#include <stdio.h>

#define SIZE 1000

int binarySearch(int arr[], int low, int high, int key) {
    if (high >= low) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) {
            return mid;
        } else if (arr[mid] > key) {
            return binarySearch(arr, low, mid - 1, key);
        } else {
            return binarySearch(arr, mid + 1, high, key);
        }
    }
    return -1;
}

int main() {
    int arr[SIZE], i, key, index;

    // Initialize array with sorted values
    for (i = 0; i < SIZE; i++) {
        arr[i] = i * 2;
    }

    // Prompt user for key to search for
    key = 69;

    // Perform binary search on array
    index = binarySearch(arr, 0, SIZE - 1, key);

    // Print result of binary search
    if (index == -1) {
        printf(""Key not found in array.\n"");
    } else {
        printf(""Key found at index %d.\n"", index);
    }

    return 0;
}

",0.00039,0
256,LSSF_ls_76,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 10000;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.615509,0
257,LSSF_ls_77,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 100000;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.615749,0
258,LSSF_ls_78,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 100;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.615038,0
259,LSSF_ls_79,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define DIM1 100
#define DIM2 100
#define DIM3 100

int main() {
    int i, j, k;
    int arr[DIM1][DIM2][DIM3];

    // Seed the random number generator
    srand(time(NULL));

    // Generate random values for the array
    for (i = 0; i < DIM1; i++) {
        for (j = 0; j < DIM2; j++) {
            for (k = 0; k < DIM3; k++) {
                arr[i][j][k] = rand() % 10000; // Generate values between 0 and 999
            }
        }
    }

    // Print the array
    printf(""Random 3D Array:\n"");
    for (i = 0; i < DIM1; i++) {
        for (j = 0; j < DIM2; j++) {
            for (k = 0; k < DIM3; k++) {
                printf(""%d "", arr[i][j][k]);
            }
            printf(""\n"");
        }
        printf(""\n"");
    }

    return 0;
}
",1.320132,0
260,LSSF_ls_80,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define DIM1 100
#define DIM2 100
#define DIM3 100

int main() {
    int i, j, k;
    int arr[DIM1][DIM2][DIM3];

    // Seed the random number generator
    srand(time(NULL));

    // Generate random values for the array
    for (i = 0; i < DIM1; i++) {
        for (j = 0; j < DIM2; j++) {
            for (k = 0; k < DIM3; k++) {
                arr[i][j][k] = rand() % 100; // Generate values between 0 and 999
            }
        }
    }

    // Print the array
    printf(""Random 3D Array:\n"");
    for (i = 0; i < DIM1; i++) {
        for (j = 0; j < DIM2; j++) {
            for (k = 0; k < DIM3; k++) {
                printf(""%d "", arr[i][j][k]);
            }
            printf(""\n"");
        }
        printf(""\n"");
    }

    return 0;
}
",1.280739,0
261,LSSF_ls_81,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

void print_matrix(int matrix[][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }
}

void multiply_matrices(int matrix1[][SIZE], int matrix2[][SIZE], int result[][SIZE]) {
    int i, j, k;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            result[i][j] = 0;
            for (k = 0; k < SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
}

int main() {
    int matrix1[SIZE][SIZE];
    int matrix2[SIZE][SIZE];
    int result[SIZE][SIZE];
    int i, j;

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            matrix1[i][j] = rand() % 100;
            matrix2[i][j] = rand() % 100;
        }
    }

    // Multiply matrices and print the result
    multiply_matrices(matrix1, matrix2, result);
    print_matrix(result);

    return 0;
}
",0.11506,0
262,LSSF_ls_82,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

void print_matrix(int matrix[][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }
}

void multiply_matrices(int matrix1[][SIZE], int matrix2[][SIZE], int result[][SIZE]) {
    int i, j, k;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            result[i][j] = 0;
            for (k = 0; k < SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
}

int main() {
    int matrix1[SIZE][SIZE];
    int matrix2[SIZE][SIZE];
    int result[SIZE][SIZE];
    int i, j;

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            matrix1[i][j] = rand() % 100;
            matrix2[i][j] = rand() % 100;
        }
    }

    // Multiply matrices and print the result
    multiply_matrices(matrix1, matrix2, result);
    print_matrix(result);

    return 0;
}
",0.11506,0
263,LSSF_ls_83,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

void print_matrix(int matrix[][SIZE]) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf(""%d "", matrix[i][j]);
        }
        printf(""\n"");
    }
}

void multiply_matrices(int matrix1[][SIZE], int matrix2[][SIZE], int result[][SIZE]) {
    int i, j, k;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            result[i][j] = 0;
            for (k = 0; k < SIZE; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
}

int main() {
    int matrix1[SIZE][SIZE];
    int matrix2[SIZE][SIZE];
    int result[SIZE][SIZE];
    int i, j;

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            matrix1[i][j] = rand() % 1000;
            matrix2[i][j] = rand() % 1000;
        }
    }

    // Multiply matrices and print the result
    multiply_matrices(matrix1, matrix2, result);
    print_matrix(result);

    return 0;
}
",0.115398,0
264,LSSF_ls_84,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100000

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 10;
    }

    // Sort the array using Quick Sort
    quick_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.175838,0
265,LSSF_ls_85,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100000

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 100;
    }

    // Sort the array using Quick Sort
    quick_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.298174,0
266,LSSF_ls_86,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100000

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }

    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 10000;
    }

    // Sort the array using Quick Sort
    quick_sort(arr, 0, SIZE - 1);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0.249436,0
267,LSSF_ls_87,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 100;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.615038,0
268,LSSF_ls_88,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 10000;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.615509,0
269,LSSF_ls_89,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10000

void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        // Swap the minimum element with the current element
        int temp = arr[i];
        arr[i] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    int arr[SIZE];
    int i;

    // Initialize array with random values
    srand(time(NULL));
    for (i = 0; i < SIZE; i++) {
        arr[i] = rand() % 100000;
    }

    // Sort the array using Selection Sort
    selection_sort(arr, SIZE);

    // Print the sorted array
    for (i = 0; i < SIZE; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",1.615749,0
270,LSSF_ls_90,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 100
#define COLS1 100
#define ROWS2 100
#define COLS2 100

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 100;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.107917,0
271,LSSF_ls_91,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 100
#define COLS1 100
#define ROWS2 100
#define COLS2 100

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 10;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 100;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.107917,0
272,LSSF_ls_92,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 100
#define COLS1 100
#define ROWS2 100
#define COLS2 100

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 100;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 100;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.107071,0
273,LSSF_ls_93,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 100
#define COLS1 100
#define ROWS2 100
#define COLS2 100

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 1000;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.107136,0
274,LSSF_ls_94,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 100
#define COLS1 100
#define ROWS2 100
#define COLS2 100

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 1000;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.107136,0
275,LSSF_ls_95,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 200
#define COLS1 200
#define ROWS2 200
#define COLS2 200

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 10;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0.833039,0
276,LSSF_ls_96,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 300
#define COLS1 300
#define ROWS2 300
#define COLS2 300

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 10;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",2.021897,0
277,LSSF_ls_97,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 500
#define COLS1 500
#define ROWS2 500
#define COLS2 500

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 10;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",1.406234,0
278,LSSF_ls_98,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 600
#define COLS1 600
#define ROWS2 600
#define COLS2 600

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 10;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",6.389242,0
279,LSSF_ls_99,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS1 600
#define COLS1 600
#define ROWS2 600
#define COLS2 600

int main() {
    int i, j, k;
    int mat1[ROWS1][COLS1];
    int mat2[ROWS2][COLS2];
    int res[ROWS1][COLS2];

    // Initialize matrices with random values
    srand(time(NULL));
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS1; j++) {
            mat1[i][j] = rand() % 100;
        }
    }
    for (i = 0; i < ROWS2; i++) {
        for (j = 0; j < COLS2; j++) {
            mat2[i][j] = rand() % 100;
        }
    }

    // Perform matrix multiplication
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            res[i][j] = 0;
            for (k = 0; k < COLS1; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Print the resulting matrix
    printf(""Resulting Matrix:\n"");
    for (i = 0; i < ROWS1; i++) {
        for (j = 0; j < COLS2; j++) {
            printf(""%d "", res[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",6.197176,0
